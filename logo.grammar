Package 
	comp.logo;
Helpers
 letter = ['a'..'z'] | ['A'..'Z'];
 number = ['0'..'9'];
 anychar = [0x0..0xffff];
 cr = 13;
 lf = 10;
 tab = 8;
 underscore = 95;
 eol = (cr | lf | cr lf);
 
Tokens
 word = 'WORD';
 list = 'LIST';
 first = 'FIRST';
 butfirst = 'BUTFIRST';
 bf = 'BF';
 last = 'LAST';
 setitem = 'SETITEM';
 push = 'PUSH';
 pop = 'POP';
 print = 'PRINT';
 pr = 'PR';
 sum = 'SUM';
 difference = 'DIFFERENCE';
 minus = 'MINUS';
 product = 'PRODUCT';
 modulo = 'MODULO';
 int = 'INT';
//// Ale
 round = 'ROUND';
 sqrt = 'SQRT';
 power = 'POWER';
 exp = 'EXP';
 and = 'AND';
 or = 'OR';
 not = 'NOT';
 forward = 'FORWARD';
 fd = 'FD';
 back = 'BACK';
 bk = 'BK';
 left = 'LEFT';
 lf = 'LF';
 right = 'RIGHT';
 rt = 'RT';
 setpos = 'SETPOS';
 setxy = 'SETXY';
 setx  = 'SETX';
 sety  = 'SETY';
 ////jonathan
 setheading = 'SETHEADING';
 seth = 'SETH';
 home = 'HOME';
 arc = 'ARC';
 clearscreen = 'CLEARSCREEN';
 cs = 'CS';
 pendown = 'PENDOWN';
 pd = 'PD';
 penup   = 'PENUP';
 pu = 'PU';
 setpencolor = 'SETPENCOLOR';
 setpc = 'SETPC';
 setpensize = 'SETPENSIZE';
 to = 'TO';
 make = 'MAKE';
 run = 'RUN';
 repeat = 'REPEAT';
 if = 'IF';
 ifelse = 'IFELSE';
 stop = 'STOP';
 goto = 'GOTO';
//////////////////////////////////////////////
 l_par = '(';
 r_par = ')';
 l_brk = '[';
 r_brk = ']';
 l_key = '{';
 r_key = '}';
 plus = '+';
 min = '-';
 div = '/';
 mult = '*';
 
 identifier = (letter | underscore (letter | number))(letter | number | underscore)*;
 integer = [number - 0] number*;
 double = number* '.' number+;
 //hex = '0x' (number | ['a'..'f'] | ['A'..'F'])+;
 
 endline = eol?;
 
 comment = '#' [anychar - [cr + lf]]* eol?;
 blank = (' ' | tab | eol);
Ignored Tokens
 comment , blank ;
Productions
 				

 p_word = word identifier p_ident_list;
 p_list = list identifier p_ident_list;
 p_first = first p_thing;
 p_butfirst = {butfirst} | {bf} identifier;
 p_last = last p_thing identifier;
// p_setitem = setitem p_index p_list p_value;
/* p_push = push p_list thing;
 p_pop = pop p_list;
 p_print = (print | pr):identifier;
 p_sum = sum integer value | value plus value;
 p_difference = difference value value | value min value;
 p_minus = minus value | min value;
 p_product = product value value value* | value mult value;
 p_modulo = modulo value value;
 p_int = int value;

//Producciones auxiliares de la gramatica
*/
 p_ident_list = {ident_list} identifier p_ident_list | {ident} identifier;
 p_thing = {word}p_word | {list}p_list;
// p_value = integer | double;
// p_index = integer;


/*
//// Ale
///add = [left]:identifier plus [right]:identifier;
 p_round         = 
 p_sqrt         = 
 p_power         =        [num][num2]
 p_exp         = 
 p_and         = 
 p_or         = 
 p_not        =        [not] : identifier: 
 p_forward=         (forward | fd) : identifier; 
 p_back         =        (back | bk) : identifier; 
 p_left         =         (left | lt) : identifier;                 
 p_right         =        (right | rt) : identifier; 
 p_setpos        =        [setpos] : identifier: 
 p_setxy         =
 p_setx          =        [setx] : identifier: 
 p_sety          =        [sety] : identifier:
///Jonathan 
///add = [left]:identifier plus [right]:identifier;
 p_setheading  =  (setheading | seth) : identifier; 
 p_home        =  [home]: identifier;
 p_arc         =  [arc]: identifier;
 p_clearscreen =  (clearscreen | cs) : identifier;
 p_pendown     =  (pendown | pd) : identifier; 
 p_penup       =  (penup | pu) : identifier;
 p_setpencolor =  (setpencolor| setpc) : identifier;
 p_setpensize  =  [setpensize] : identifier;
 p_to          =  [procname] : identifier plus [input1]:identifier ([input2]:identifier | [input3]p_word*);
 p_make        =  [vamame] : identifier plus [value] : identifier;
 p_run         =  [instructionlist] : identifier;
 p_repeat      =  [num] : identifier plus [instructionlist] : identifier;
 p_if          = [tfinstructionlist1] : identifier plus  [tfinstructionlist1] : identifier;
 p_ifelse      = [tfinstructionlist1] : identifier plus  [tfinstructionlist1] : identifier;
 p_stop        = [stop]  : identifier;
 p_goto        = [word] : identifier; 
 
 input = identifier;*/
