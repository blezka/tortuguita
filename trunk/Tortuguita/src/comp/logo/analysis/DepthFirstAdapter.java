/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.analysis;

import java.util.*;
import comp.logo.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProg().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAListProg(AListProg node)
    {
        defaultIn(node);
    }

    public void outAListProg(AListProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListProg(AListProg node)
    {
        inAListProg(node);
        if(node.getPInstructionlist() != null)
        {
            node.getPInstructionlist().apply(this);
        }
        outAListProg(node);
    }

    public void inAListaPInstructionlist(AListaPInstructionlist node)
    {
        defaultIn(node);
    }

    public void outAListaPInstructionlist(AListaPInstructionlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaPInstructionlist(AListaPInstructionlist node)
    {
        inAListaPInstructionlist(node);
        if(node.getPInstruction() != null)
        {
            node.getPInstruction().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getPInstructionlist() != null)
        {
            node.getPInstructionlist().apply(this);
        }
        outAListaPInstructionlist(node);
    }

    public void inAInstPInstructionlist(AInstPInstructionlist node)
    {
        defaultIn(node);
    }

    public void outAInstPInstructionlist(AInstPInstructionlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstPInstructionlist(AInstPInstructionlist node)
    {
        inAInstPInstructionlist(node);
        if(node.getPInstruction() != null)
        {
            node.getPInstruction().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAInstPInstructionlist(node);
    }

    public void inARunPInstructionlist(ARunPInstructionlist node)
    {
        defaultIn(node);
    }

    public void outARunPInstructionlist(ARunPInstructionlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARunPInstructionlist(ARunPInstructionlist node)
    {
        inARunPInstructionlist(node);
        if(node.getRun() != null)
        {
            node.getRun().apply(this);
        }
        if(node.getLKey() != null)
        {
            node.getLKey().apply(this);
        }
        if(node.getPInstructionlist() != null)
        {
            node.getPInstructionlist().apply(this);
        }
        if(node.getRKey() != null)
        {
            node.getRKey().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outARunPInstructionlist(node);
    }

    public void inAPrimitivesPInstruction(APrimitivesPInstruction node)
    {
        defaultIn(node);
    }

    public void outAPrimitivesPInstruction(APrimitivesPInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitivesPInstruction(APrimitivesPInstruction node)
    {
        inAPrimitivesPInstruction(node);
        if(node.getPPrimitives() != null)
        {
            node.getPPrimitives().apply(this);
        }
        outAPrimitivesPInstruction(node);
    }

    public void inAComunicationPInstruction(AComunicationPInstruction node)
    {
        defaultIn(node);
    }

    public void outAComunicationPInstruction(AComunicationPInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComunicationPInstruction(AComunicationPInstruction node)
    {
        inAComunicationPInstruction(node);
        if(node.getPCommunication() != null)
        {
            node.getPCommunication().apply(this);
        }
        outAComunicationPInstruction(node);
    }

    public void inAArithmeticPInstruction(AArithmeticPInstruction node)
    {
        defaultIn(node);
    }

    public void outAArithmeticPInstruction(AArithmeticPInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticPInstruction(AArithmeticPInstruction node)
    {
        inAArithmeticPInstruction(node);
        if(node.getPArithmetic() != null)
        {
            node.getPArithmetic().apply(this);
        }
        outAArithmeticPInstruction(node);
    }

    public void inALogicPInstruction(ALogicPInstruction node)
    {
        defaultIn(node);
    }

    public void outALogicPInstruction(ALogicPInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicPInstruction(ALogicPInstruction node)
    {
        inALogicPInstruction(node);
        if(node.getPLogic() != null)
        {
            node.getPLogic().apply(this);
        }
        outALogicPInstruction(node);
    }

    public void inAGraphicsPInstruction(AGraphicsPInstruction node)
    {
        defaultIn(node);
    }

    public void outAGraphicsPInstruction(AGraphicsPInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGraphicsPInstruction(AGraphicsPInstruction node)
    {
        inAGraphicsPInstruction(node);
        if(node.getPGraphics() != null)
        {
            node.getPGraphics().apply(this);
        }
        outAGraphicsPInstruction(node);
    }

    public void inAWorkspacePInstruction(AWorkspacePInstruction node)
    {
        defaultIn(node);
    }

    public void outAWorkspacePInstruction(AWorkspacePInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWorkspacePInstruction(AWorkspacePInstruction node)
    {
        inAWorkspacePInstruction(node);
        if(node.getPWorkspace() != null)
        {
            node.getPWorkspace().apply(this);
        }
        outAWorkspacePInstruction(node);
    }

    public void inAControlPInstruction(AControlPInstruction node)
    {
        defaultIn(node);
    }

    public void outAControlPInstruction(AControlPInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAControlPInstruction(AControlPInstruction node)
    {
        inAControlPInstruction(node);
        if(node.getPControlStructures() != null)
        {
            node.getPControlStructures().apply(this);
        }
        outAControlPInstruction(node);
    }

    public void inAVarsPPrimitives(AVarsPPrimitives node)
    {
        defaultIn(node);
    }

    public void outAVarsPPrimitives(AVarsPPrimitives node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarsPPrimitives(AVarsPPrimitives node)
    {
        inAVarsPPrimitives(node);
        if(node.getPWord() != null)
        {
            node.getPWord().apply(this);
        }
        outAVarsPPrimitives(node);
    }

    public void inAListPPrimitives(AListPPrimitives node)
    {
        defaultIn(node);
    }

    public void outAListPPrimitives(AListPPrimitives node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListPPrimitives(AListPPrimitives node)
    {
        inAListPPrimitives(node);
        if(node.getPList() != null)
        {
            node.getPList().apply(this);
        }
        outAListPPrimitives(node);
    }

    public void inASelectorsPPrimitives(ASelectorsPPrimitives node)
    {
        defaultIn(node);
    }

    public void outASelectorsPPrimitives(ASelectorsPPrimitives node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectorsPPrimitives(ASelectorsPPrimitives node)
    {
        inASelectorsPPrimitives(node);
        if(node.getPSelectors() != null)
        {
            node.getPSelectors().apply(this);
        }
        outASelectorsPPrimitives(node);
    }

    public void inAMutatorPPrimitives(AMutatorPPrimitives node)
    {
        defaultIn(node);
    }

    public void outAMutatorPPrimitives(AMutatorPPrimitives node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMutatorPPrimitives(AMutatorPPrimitives node)
    {
        inAMutatorPPrimitives(node);
        if(node.getPMutator() != null)
        {
            node.getPMutator().apply(this);
        }
        outAMutatorPPrimitives(node);
    }

    public void inAFirstPSelectors(AFirstPSelectors node)
    {
        defaultIn(node);
    }

    public void outAFirstPSelectors(AFirstPSelectors node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFirstPSelectors(AFirstPSelectors node)
    {
        inAFirstPSelectors(node);
        if(node.getPFirst() != null)
        {
            node.getPFirst().apply(this);
        }
        outAFirstPSelectors(node);
    }

    public void inAButfirstPSelectors(AButfirstPSelectors node)
    {
        defaultIn(node);
    }

    public void outAButfirstPSelectors(AButfirstPSelectors node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAButfirstPSelectors(AButfirstPSelectors node)
    {
        inAButfirstPSelectors(node);
        if(node.getPButfirst() != null)
        {
            node.getPButfirst().apply(this);
        }
        outAButfirstPSelectors(node);
    }

    public void inALastPSelectors(ALastPSelectors node)
    {
        defaultIn(node);
    }

    public void outALastPSelectors(ALastPSelectors node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALastPSelectors(ALastPSelectors node)
    {
        inALastPSelectors(node);
        if(node.getPLast() != null)
        {
            node.getPLast().apply(this);
        }
        outALastPSelectors(node);
    }

    public void inASetPMutator(ASetPMutator node)
    {
        defaultIn(node);
    }

    public void outASetPMutator(ASetPMutator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetPMutator(ASetPMutator node)
    {
        inASetPMutator(node);
        if(node.getPSetitem() != null)
        {
            node.getPSetitem().apply(this);
        }
        outASetPMutator(node);
    }

    public void inAPCommunication(APCommunication node)
    {
        defaultIn(node);
    }

    public void outAPCommunication(APCommunication node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPCommunication(APCommunication node)
    {
        inAPCommunication(node);
        if(node.getPPrint() != null)
        {
            node.getPPrint().apply(this);
        }
        outAPCommunication(node);
    }

    public void inASumPArithmetic(ASumPArithmetic node)
    {
        defaultIn(node);
    }

    public void outASumPArithmetic(ASumPArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASumPArithmetic(ASumPArithmetic node)
    {
        inASumPArithmetic(node);
        if(node.getPSum() != null)
        {
            node.getPSum().apply(this);
        }
        outASumPArithmetic(node);
    }

    public void inADifferencePArithmetic(ADifferencePArithmetic node)
    {
        defaultIn(node);
    }

    public void outADifferencePArithmetic(ADifferencePArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifferencePArithmetic(ADifferencePArithmetic node)
    {
        inADifferencePArithmetic(node);
        if(node.getPDifference() != null)
        {
            node.getPDifference().apply(this);
        }
        outADifferencePArithmetic(node);
    }

    public void inAMinusPArithmetic(AMinusPArithmetic node)
    {
        defaultIn(node);
    }

    public void outAMinusPArithmetic(AMinusPArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusPArithmetic(AMinusPArithmetic node)
    {
        inAMinusPArithmetic(node);
        if(node.getPMinus() != null)
        {
            node.getPMinus().apply(this);
        }
        outAMinusPArithmetic(node);
    }

    public void inAProductPArithmetic(AProductPArithmetic node)
    {
        defaultIn(node);
    }

    public void outAProductPArithmetic(AProductPArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProductPArithmetic(AProductPArithmetic node)
    {
        inAProductPArithmetic(node);
        if(node.getPProduct() != null)
        {
            node.getPProduct().apply(this);
        }
        outAProductPArithmetic(node);
    }

    public void inAModuloPArithmetic(AModuloPArithmetic node)
    {
        defaultIn(node);
    }

    public void outAModuloPArithmetic(AModuloPArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloPArithmetic(AModuloPArithmetic node)
    {
        inAModuloPArithmetic(node);
        if(node.getPModulo() != null)
        {
            node.getPModulo().apply(this);
        }
        outAModuloPArithmetic(node);
    }

    public void inAIntPArithmetic(AIntPArithmetic node)
    {
        defaultIn(node);
    }

    public void outAIntPArithmetic(AIntPArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntPArithmetic(AIntPArithmetic node)
    {
        inAIntPArithmetic(node);
        if(node.getPInt() != null)
        {
            node.getPInt().apply(this);
        }
        outAIntPArithmetic(node);
    }

    public void inARoundPArithmetic(ARoundPArithmetic node)
    {
        defaultIn(node);
    }

    public void outARoundPArithmetic(ARoundPArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARoundPArithmetic(ARoundPArithmetic node)
    {
        inARoundPArithmetic(node);
        if(node.getPRound() != null)
        {
            node.getPRound().apply(this);
        }
        outARoundPArithmetic(node);
    }

    public void inASqrtPArithmetic(ASqrtPArithmetic node)
    {
        defaultIn(node);
    }

    public void outASqrtPArithmetic(ASqrtPArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASqrtPArithmetic(ASqrtPArithmetic node)
    {
        inASqrtPArithmetic(node);
        if(node.getPSqrt() != null)
        {
            node.getPSqrt().apply(this);
        }
        outASqrtPArithmetic(node);
    }

    public void inAPowerPArithmetic(APowerPArithmetic node)
    {
        defaultIn(node);
    }

    public void outAPowerPArithmetic(APowerPArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPowerPArithmetic(APowerPArithmetic node)
    {
        inAPowerPArithmetic(node);
        if(node.getPPower() != null)
        {
            node.getPPower().apply(this);
        }
        outAPowerPArithmetic(node);
    }

    public void inAExpPArithmetic(AExpPArithmetic node)
    {
        defaultIn(node);
    }

    public void outAExpPArithmetic(AExpPArithmetic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpPArithmetic(AExpPArithmetic node)
    {
        inAExpPArithmetic(node);
        if(node.getPExp() != null)
        {
            node.getPExp().apply(this);
        }
        outAExpPArithmetic(node);
    }

    public void inAAndPLogic(AAndPLogic node)
    {
        defaultIn(node);
    }

    public void outAAndPLogic(AAndPLogic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndPLogic(AAndPLogic node)
    {
        inAAndPLogic(node);
        if(node.getPAnd() != null)
        {
            node.getPAnd().apply(this);
        }
        outAAndPLogic(node);
    }

    public void inAOrPLogic(AOrPLogic node)
    {
        defaultIn(node);
    }

    public void outAOrPLogic(AOrPLogic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrPLogic(AOrPLogic node)
    {
        inAOrPLogic(node);
        if(node.getPOr() != null)
        {
            node.getPOr().apply(this);
        }
        outAOrPLogic(node);
    }

    public void inANotPLogic(ANotPLogic node)
    {
        defaultIn(node);
    }

    public void outANotPLogic(ANotPLogic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotPLogic(ANotPLogic node)
    {
        inANotPLogic(node);
        if(node.getPNot() != null)
        {
            node.getPNot().apply(this);
        }
        outANotPLogic(node);
    }

    public void inAFdsPGraphics(AFdsPGraphics node)
    {
        defaultIn(node);
    }

    public void outAFdsPGraphics(AFdsPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFdsPGraphics(AFdsPGraphics node)
    {
        inAFdsPGraphics(node);
        if(node.getPForward() != null)
        {
            node.getPForward().apply(this);
        }
        outAFdsPGraphics(node);
    }

    public void inABksPGraphics(ABksPGraphics node)
    {
        defaultIn(node);
    }

    public void outABksPGraphics(ABksPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABksPGraphics(ABksPGraphics node)
    {
        inABksPGraphics(node);
        if(node.getPBack() != null)
        {
            node.getPBack().apply(this);
        }
        outABksPGraphics(node);
    }

    public void inALtsPGraphics(ALtsPGraphics node)
    {
        defaultIn(node);
    }

    public void outALtsPGraphics(ALtsPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtsPGraphics(ALtsPGraphics node)
    {
        inALtsPGraphics(node);
        if(node.getPLeft() != null)
        {
            node.getPLeft().apply(this);
        }
        outALtsPGraphics(node);
    }

    public void inARtsPGraphics(ARtsPGraphics node)
    {
        defaultIn(node);
    }

    public void outARtsPGraphics(ARtsPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARtsPGraphics(ARtsPGraphics node)
    {
        inARtsPGraphics(node);
        if(node.getPRight() != null)
        {
            node.getPRight().apply(this);
        }
        outARtsPGraphics(node);
    }

    public void inASetposPGraphics(ASetposPGraphics node)
    {
        defaultIn(node);
    }

    public void outASetposPGraphics(ASetposPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetposPGraphics(ASetposPGraphics node)
    {
        inASetposPGraphics(node);
        if(node.getPSetpos() != null)
        {
            node.getPSetpos().apply(this);
        }
        outASetposPGraphics(node);
    }

    public void inASetxyPGraphics(ASetxyPGraphics node)
    {
        defaultIn(node);
    }

    public void outASetxyPGraphics(ASetxyPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetxyPGraphics(ASetxyPGraphics node)
    {
        inASetxyPGraphics(node);
        if(node.getPSetxy() != null)
        {
            node.getPSetxy().apply(this);
        }
        outASetxyPGraphics(node);
    }

    public void inASetxPGraphics(ASetxPGraphics node)
    {
        defaultIn(node);
    }

    public void outASetxPGraphics(ASetxPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetxPGraphics(ASetxPGraphics node)
    {
        inASetxPGraphics(node);
        if(node.getPSetx() != null)
        {
            node.getPSetx().apply(this);
        }
        outASetxPGraphics(node);
    }

    public void inASetyPGraphics(ASetyPGraphics node)
    {
        defaultIn(node);
    }

    public void outASetyPGraphics(ASetyPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetyPGraphics(ASetyPGraphics node)
    {
        inASetyPGraphics(node);
        if(node.getPSety() != null)
        {
            node.getPSety().apply(this);
        }
        outASetyPGraphics(node);
    }

    public void inASethPGraphics(ASethPGraphics node)
    {
        defaultIn(node);
    }

    public void outASethPGraphics(ASethPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASethPGraphics(ASethPGraphics node)
    {
        inASethPGraphics(node);
        if(node.getPSetheading() != null)
        {
            node.getPSetheading().apply(this);
        }
        outASethPGraphics(node);
    }

    public void inAHomePGraphics(AHomePGraphics node)
    {
        defaultIn(node);
    }

    public void outAHomePGraphics(AHomePGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHomePGraphics(AHomePGraphics node)
    {
        inAHomePGraphics(node);
        if(node.getPHome() != null)
        {
            node.getPHome().apply(this);
        }
        outAHomePGraphics(node);
    }

    public void inAArcPGraphics(AArcPGraphics node)
    {
        defaultIn(node);
    }

    public void outAArcPGraphics(AArcPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArcPGraphics(AArcPGraphics node)
    {
        inAArcPGraphics(node);
        if(node.getPArc() != null)
        {
            node.getPArc().apply(this);
        }
        outAArcPGraphics(node);
    }

    public void inAClrPGraphics(AClrPGraphics node)
    {
        defaultIn(node);
    }

    public void outAClrPGraphics(AClrPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClrPGraphics(AClrPGraphics node)
    {
        inAClrPGraphics(node);
        if(node.getPClearscreen() != null)
        {
            node.getPClearscreen().apply(this);
        }
        outAClrPGraphics(node);
    }

    public void inAPenctrlPGraphics(APenctrlPGraphics node)
    {
        defaultIn(node);
    }

    public void outAPenctrlPGraphics(APenctrlPGraphics node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPenctrlPGraphics(APenctrlPGraphics node)
    {
        inAPenctrlPGraphics(node);
        if(node.getPPencontrol() != null)
        {
            node.getPPencontrol().apply(this);
        }
        outAPenctrlPGraphics(node);
    }

    public void inAPdPPencontrol(APdPPencontrol node)
    {
        defaultIn(node);
    }

    public void outAPdPPencontrol(APdPPencontrol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPdPPencontrol(APdPPencontrol node)
    {
        inAPdPPencontrol(node);
        if(node.getPPendown() != null)
        {
            node.getPPendown().apply(this);
        }
        outAPdPPencontrol(node);
    }

    public void inAPuPPencontrol(APuPPencontrol node)
    {
        defaultIn(node);
    }

    public void outAPuPPencontrol(APuPPencontrol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPuPPencontrol(APuPPencontrol node)
    {
        inAPuPPencontrol(node);
        if(node.getPPenup() != null)
        {
            node.getPPenup().apply(this);
        }
        outAPuPPencontrol(node);
    }

    public void inASetpcPPencontrol(ASetpcPPencontrol node)
    {
        defaultIn(node);
    }

    public void outASetpcPPencontrol(ASetpcPPencontrol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetpcPPencontrol(ASetpcPPencontrol node)
    {
        inASetpcPPencontrol(node);
        if(node.getPSetpencolor() != null)
        {
            node.getPSetpencolor().apply(this);
        }
        outASetpcPPencontrol(node);
    }

    public void inASetpensizePPencontrol(ASetpensizePPencontrol node)
    {
        defaultIn(node);
    }

    public void outASetpensizePPencontrol(ASetpensizePPencontrol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetpensizePPencontrol(ASetpensizePPencontrol node)
    {
        inASetpensizePPencontrol(node);
        if(node.getPSetpensize() != null)
        {
            node.getPSetpensize().apply(this);
        }
        outASetpensizePPencontrol(node);
    }

    public void inAToPWorkspace(AToPWorkspace node)
    {
        defaultIn(node);
    }

    public void outAToPWorkspace(AToPWorkspace node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAToPWorkspace(AToPWorkspace node)
    {
        inAToPWorkspace(node);
        if(node.getPTo() != null)
        {
            node.getPTo().apply(this);
        }
        outAToPWorkspace(node);
    }

    public void inAMakePWorkspace(AMakePWorkspace node)
    {
        defaultIn(node);
    }

    public void outAMakePWorkspace(AMakePWorkspace node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMakePWorkspace(AMakePWorkspace node)
    {
        inAMakePWorkspace(node);
        if(node.getPMake() != null)
        {
            node.getPMake().apply(this);
        }
        outAMakePWorkspace(node);
    }

    public void inARepeatPControlStructures(ARepeatPControlStructures node)
    {
        defaultIn(node);
    }

    public void outARepeatPControlStructures(ARepeatPControlStructures node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatPControlStructures(ARepeatPControlStructures node)
    {
        inARepeatPControlStructures(node);
        if(node.getPRepeat() != null)
        {
            node.getPRepeat().apply(this);
        }
        outARepeatPControlStructures(node);
    }

    public void inAIfPControlStructures(AIfPControlStructures node)
    {
        defaultIn(node);
    }

    public void outAIfPControlStructures(AIfPControlStructures node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfPControlStructures(AIfPControlStructures node)
    {
        inAIfPControlStructures(node);
        if(node.getPIf() != null)
        {
            node.getPIf().apply(this);
        }
        outAIfPControlStructures(node);
    }

    public void inAIfelsePControlStructures(AIfelsePControlStructures node)
    {
        defaultIn(node);
    }

    public void outAIfelsePControlStructures(AIfelsePControlStructures node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelsePControlStructures(AIfelsePControlStructures node)
    {
        inAIfelsePControlStructures(node);
        if(node.getPIfelse() != null)
        {
            node.getPIfelse().apply(this);
        }
        outAIfelsePControlStructures(node);
    }

    public void inAStopPControlStructures(AStopPControlStructures node)
    {
        defaultIn(node);
    }

    public void outAStopPControlStructures(AStopPControlStructures node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStopPControlStructures(AStopPControlStructures node)
    {
        inAStopPControlStructures(node);
        if(node.getPStop() != null)
        {
            node.getPStop().apply(this);
        }
        outAStopPControlStructures(node);
    }

    public void inAGotoPControlStructures(AGotoPControlStructures node)
    {
        defaultIn(node);
    }

    public void outAGotoPControlStructures(AGotoPControlStructures node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGotoPControlStructures(AGotoPControlStructures node)
    {
        inAGotoPControlStructures(node);
        if(node.getPGoto() != null)
        {
            node.getPGoto().apply(this);
        }
        outAGotoPControlStructures(node);
    }

    public void inAPWord(APWord node)
    {
        defaultIn(node);
    }

    public void outAPWord(APWord node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPWord(APWord node)
    {
        inAPWord(node);
        if(node.getWord() != null)
        {
            node.getWord().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPIdentList() != null)
        {
            node.getPIdentList().apply(this);
        }
        outAPWord(node);
    }

    public void inAPList(APList node)
    {
        defaultIn(node);
    }

    public void outAPList(APList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPList(APList node)
    {
        inAPList(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPIdentList() != null)
        {
            node.getPIdentList().apply(this);
        }
        outAPList(node);
    }

    public void inAPFirst(APFirst node)
    {
        defaultIn(node);
    }

    public void outAPFirst(APFirst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPFirst(APFirst node)
    {
        inAPFirst(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPFirst(node);
    }

    public void inAButfirstPButfirst(AButfirstPButfirst node)
    {
        defaultIn(node);
    }

    public void outAButfirstPButfirst(AButfirstPButfirst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAButfirstPButfirst(AButfirstPButfirst node)
    {
        inAButfirstPButfirst(node);
        if(node.getButfirst() != null)
        {
            node.getButfirst().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAButfirstPButfirst(node);
    }

    public void inABfPButfirst(ABfPButfirst node)
    {
        defaultIn(node);
    }

    public void outABfPButfirst(ABfPButfirst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABfPButfirst(ABfPButfirst node)
    {
        inABfPButfirst(node);
        if(node.getBf() != null)
        {
            node.getBf().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outABfPButfirst(node);
    }

    public void inAPLast(APLast node)
    {
        defaultIn(node);
    }

    public void outAPLast(APLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPLast(APLast node)
    {
        inAPLast(node);
        if(node.getLast() != null)
        {
            node.getLast().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPLast(node);
    }

    public void inAPSetitem(APSetitem node)
    {
        defaultIn(node);
    }

    public void outAPSetitem(APSetitem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSetitem(APSetitem node)
    {
        inAPSetitem(node);
        if(node.getSetitem() != null)
        {
            node.getSetitem().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPSetitem(node);
    }

    public void inAPPrint(APPrint node)
    {
        defaultIn(node);
    }

    public void outAPPrint(APPrint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPPrint(APPrint node)
    {
        inAPPrint(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPIdentList() != null)
        {
            node.getPIdentList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPPrint(node);
    }

    public void inASumPSum(ASumPSum node)
    {
        defaultIn(node);
    }

    public void outASumPSum(ASumPSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASumPSum(ASumPSum node)
    {
        inASumPSum(node);
        if(node.getSum() != null)
        {
            node.getSum().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPValueList() != null)
        {
            node.getPValueList().apply(this);
        }
        outASumPSum(node);
    }

    public void inAPlusPSum(APlusPSum node)
    {
        defaultIn(node);
    }

    public void outAPlusPSum(APlusPSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusPSum(APlusPSum node)
    {
        inAPlusPSum(node);
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPSumList() != null)
        {
            node.getPSumList().apply(this);
        }
        outAPlusPSum(node);
    }

    public void inADifPDifference(ADifPDifference node)
    {
        defaultIn(node);
    }

    public void outADifPDifference(ADifPDifference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifPDifference(ADifPDifference node)
    {
        inADifPDifference(node);
        if(node.getDifference() != null)
        {
            node.getDifference().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPValueList() != null)
        {
            node.getPValueList().apply(this);
        }
        outADifPDifference(node);
    }

    public void inAMinPDifference(AMinPDifference node)
    {
        defaultIn(node);
    }

    public void outAMinPDifference(AMinPDifference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinPDifference(AMinPDifference node)
    {
        inAMinPDifference(node);
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPDifList() != null)
        {
            node.getPDifList().apply(this);
        }
        outAMinPDifference(node);
    }

    public void inAMinusPMinus(AMinusPMinus node)
    {
        defaultIn(node);
    }

    public void outAMinusPMinus(AMinusPMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusPMinus(AMinusPMinus node)
    {
        inAMinusPMinus(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAMinusPMinus(node);
    }

    public void inAMinPMinus(AMinPMinus node)
    {
        defaultIn(node);
    }

    public void outAMinPMinus(AMinPMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinPMinus(AMinPMinus node)
    {
        inAMinPMinus(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAMinPMinus(node);
    }

    public void inAProdPProduct(AProdPProduct node)
    {
        defaultIn(node);
    }

    public void outAProdPProduct(AProdPProduct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdPProduct(AProdPProduct node)
    {
        inAProdPProduct(node);
        if(node.getProduct() != null)
        {
            node.getProduct().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPValueList() != null)
        {
            node.getPValueList().apply(this);
        }
        outAProdPProduct(node);
    }

    public void inAMultPProduct(AMultPProduct node)
    {
        defaultIn(node);
    }

    public void outAMultPProduct(AMultPProduct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultPProduct(AMultPProduct node)
    {
        inAMultPProduct(node);
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPMultList() != null)
        {
            node.getPMultList().apply(this);
        }
        outAMultPProduct(node);
    }

    public void inAPModulo(APModulo node)
    {
        defaultIn(node);
    }

    public void outAPModulo(APModulo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPModulo(APModulo node)
    {
        inAPModulo(node);
        if(node.getModulo() != null)
        {
            node.getModulo().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getDivd() != null)
        {
            node.getDivd().apply(this);
        }
        outAPModulo(node);
    }

    public void inAPInt(APInt node)
    {
        defaultIn(node);
    }

    public void outAPInt(APInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPInt(APInt node)
    {
        inAPInt(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPInt(node);
    }

    public void inAPRound(APRound node)
    {
        defaultIn(node);
    }

    public void outAPRound(APRound node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPRound(APRound node)
    {
        inAPRound(node);
        if(node.getRound() != null)
        {
            node.getRound().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPRound(node);
    }

    public void inAPSqrt(APSqrt node)
    {
        defaultIn(node);
    }

    public void outAPSqrt(APSqrt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSqrt(APSqrt node)
    {
        inAPSqrt(node);
        if(node.getSqrt() != null)
        {
            node.getSqrt().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPSqrt(node);
    }

    public void inAPPower(APPower node)
    {
        defaultIn(node);
    }

    public void outAPPower(APPower node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPPower(APPower node)
    {
        inAPPower(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        if(node.getBase() != null)
        {
            node.getBase().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPPower(node);
    }

    public void inAPExp(APExp node)
    {
        defaultIn(node);
    }

    public void outAPExp(APExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPExp(APExp node)
    {
        inAPExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPExp(node);
    }

    public void inAPAnd(APAnd node)
    {
        defaultIn(node);
    }

    public void outAPAnd(APAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPAnd(APAnd node)
    {
        inAPAnd(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getV1() != null)
        {
            node.getV1().apply(this);
        }
        if(node.getV2() != null)
        {
            node.getV2().apply(this);
        }
        outAPAnd(node);
    }

    public void inAPOr(APOr node)
    {
        defaultIn(node);
    }

    public void outAPOr(APOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPOr(APOr node)
    {
        inAPOr(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getV1() != null)
        {
            node.getV1().apply(this);
        }
        if(node.getV2() != null)
        {
            node.getV2().apply(this);
        }
        outAPOr(node);
    }

    public void inAPNot(APNot node)
    {
        defaultIn(node);
    }

    public void outAPNot(APNot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPNot(APNot node)
    {
        inAPNot(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getV1() != null)
        {
            node.getV1().apply(this);
        }
        outAPNot(node);
    }

    public void inAForwardPForward(AForwardPForward node)
    {
        defaultIn(node);
    }

    public void outAForwardPForward(AForwardPForward node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardPForward(AForwardPForward node)
    {
        inAForwardPForward(node);
        if(node.getForward() != null)
        {
            node.getForward().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAForwardPForward(node);
    }

    public void inAFdPForward(AFdPForward node)
    {
        defaultIn(node);
    }

    public void outAFdPForward(AFdPForward node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFdPForward(AFdPForward node)
    {
        inAFdPForward(node);
        if(node.getFd() != null)
        {
            node.getFd().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAFdPForward(node);
    }

    public void inABackPBack(ABackPBack node)
    {
        defaultIn(node);
    }

    public void outABackPBack(ABackPBack node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABackPBack(ABackPBack node)
    {
        inABackPBack(node);
        if(node.getBack() != null)
        {
            node.getBack().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outABackPBack(node);
    }

    public void inABkPBack(ABkPBack node)
    {
        defaultIn(node);
    }

    public void outABkPBack(ABkPBack node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABkPBack(ABkPBack node)
    {
        inABkPBack(node);
        if(node.getBk() != null)
        {
            node.getBk().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outABkPBack(node);
    }

    public void inALeftPLeft(ALeftPLeft node)
    {
        defaultIn(node);
    }

    public void outALeftPLeft(ALeftPLeft node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftPLeft(ALeftPLeft node)
    {
        inALeftPLeft(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outALeftPLeft(node);
    }

    public void inALtPLeft(ALtPLeft node)
    {
        defaultIn(node);
    }

    public void outALtPLeft(ALtPLeft node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtPLeft(ALtPLeft node)
    {
        inALtPLeft(node);
        if(node.getLf() != null)
        {
            node.getLf().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outALtPLeft(node);
    }

    public void inARightPRight(ARightPRight node)
    {
        defaultIn(node);
    }

    public void outARightPRight(ARightPRight node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightPRight(ARightPRight node)
    {
        inARightPRight(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outARightPRight(node);
    }

    public void inARtPRight(ARtPRight node)
    {
        defaultIn(node);
    }

    public void outARtPRight(ARtPRight node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARtPRight(ARtPRight node)
    {
        inARtPRight(node);
        if(node.getRt() != null)
        {
            node.getRt().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outARtPRight(node);
    }

    public void inAPSetpos(APSetpos node)
    {
        defaultIn(node);
    }

    public void outAPSetpos(APSetpos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSetpos(APSetpos node)
    {
        inAPSetpos(node);
        if(node.getSetpos() != null)
        {
            node.getSetpos().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPSetpos(node);
    }

    public void inAPSetxy(APSetxy node)
    {
        defaultIn(node);
    }

    public void outAPSetxy(APSetxy node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSetxy(APSetxy node)
    {
        inAPSetxy(node);
        if(node.getSetxy() != null)
        {
            node.getSetxy().apply(this);
        }
        if(node.getBase() != null)
        {
            node.getBase().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPSetxy(node);
    }

    public void inAPSetx(APSetx node)
    {
        defaultIn(node);
    }

    public void outAPSetx(APSetx node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSetx(APSetx node)
    {
        inAPSetx(node);
        if(node.getSetx() != null)
        {
            node.getSetx().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAPSetx(node);
    }

    public void inAPSety(APSety node)
    {
        defaultIn(node);
    }

    public void outAPSety(APSety node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSety(APSety node)
    {
        inAPSety(node);
        if(node.getSety() != null)
        {
            node.getSety().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAPSety(node);
    }

    public void inASetheadingPSetheading(ASetheadingPSetheading node)
    {
        defaultIn(node);
    }

    public void outASetheadingPSetheading(ASetheadingPSetheading node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetheadingPSetheading(ASetheadingPSetheading node)
    {
        inASetheadingPSetheading(node);
        if(node.getSetheading() != null)
        {
            node.getSetheading().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outASetheadingPSetheading(node);
    }

    public void inASethPSetheading(ASethPSetheading node)
    {
        defaultIn(node);
    }

    public void outASethPSetheading(ASethPSetheading node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASethPSetheading(ASethPSetheading node)
    {
        inASethPSetheading(node);
        if(node.getSeth() != null)
        {
            node.getSeth().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outASethPSetheading(node);
    }

    public void inAPHome(APHome node)
    {
        defaultIn(node);
    }

    public void outAPHome(APHome node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPHome(APHome node)
    {
        inAPHome(node);
        if(node.getHome() != null)
        {
            node.getHome().apply(this);
        }
        outAPHome(node);
    }

    public void inAPArc(APArc node)
    {
        defaultIn(node);
    }

    public void outAPArc(APArc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPArc(APArc node)
    {
        inAPArc(node);
        if(node.getArc() != null)
        {
            node.getArc().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPArc(node);
    }

    public void inAClearscreenPClearscreen(AClearscreenPClearscreen node)
    {
        defaultIn(node);
    }

    public void outAClearscreenPClearscreen(AClearscreenPClearscreen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClearscreenPClearscreen(AClearscreenPClearscreen node)
    {
        inAClearscreenPClearscreen(node);
        if(node.getClearscreen() != null)
        {
            node.getClearscreen().apply(this);
        }
        outAClearscreenPClearscreen(node);
    }

    public void inACsPClearscreen(ACsPClearscreen node)
    {
        defaultIn(node);
    }

    public void outACsPClearscreen(ACsPClearscreen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsPClearscreen(ACsPClearscreen node)
    {
        inACsPClearscreen(node);
        if(node.getCs() != null)
        {
            node.getCs().apply(this);
        }
        outACsPClearscreen(node);
    }

    public void inAPendownPPendown(APendownPPendown node)
    {
        defaultIn(node);
    }

    public void outAPendownPPendown(APendownPPendown node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPendownPPendown(APendownPPendown node)
    {
        inAPendownPPendown(node);
        if(node.getPendown() != null)
        {
            node.getPendown().apply(this);
        }
        outAPendownPPendown(node);
    }

    public void inAPdPPendown(APdPPendown node)
    {
        defaultIn(node);
    }

    public void outAPdPPendown(APdPPendown node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPdPPendown(APdPPendown node)
    {
        inAPdPPendown(node);
        if(node.getPd() != null)
        {
            node.getPd().apply(this);
        }
        outAPdPPendown(node);
    }

    public void inAPenupPPenup(APenupPPenup node)
    {
        defaultIn(node);
    }

    public void outAPenupPPenup(APenupPPenup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPenupPPenup(APenupPPenup node)
    {
        inAPenupPPenup(node);
        if(node.getPenup() != null)
        {
            node.getPenup().apply(this);
        }
        outAPenupPPenup(node);
    }

    public void inAPuPPenup(APuPPenup node)
    {
        defaultIn(node);
    }

    public void outAPuPPenup(APuPPenup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPuPPenup(APuPPenup node)
    {
        inAPuPPenup(node);
        if(node.getPu() != null)
        {
            node.getPu().apply(this);
        }
        outAPuPPenup(node);
    }

    public void inASetpencolorPSetpencolor(ASetpencolorPSetpencolor node)
    {
        defaultIn(node);
    }

    public void outASetpencolorPSetpencolor(ASetpencolorPSetpencolor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetpencolorPSetpencolor(ASetpencolorPSetpencolor node)
    {
        inASetpencolorPSetpencolor(node);
        if(node.getSetpencolor() != null)
        {
            node.getSetpencolor().apply(this);
        }
        if(node.getPColor() != null)
        {
            node.getPColor().apply(this);
        }
        outASetpencolorPSetpencolor(node);
    }

    public void inASetpcPSetpencolor(ASetpcPSetpencolor node)
    {
        defaultIn(node);
    }

    public void outASetpcPSetpencolor(ASetpcPSetpencolor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetpcPSetpencolor(ASetpcPSetpencolor node)
    {
        inASetpcPSetpencolor(node);
        if(node.getSetpc() != null)
        {
            node.getSetpc().apply(this);
        }
        if(node.getPColor() != null)
        {
            node.getPColor().apply(this);
        }
        outASetpcPSetpencolor(node);
    }

    public void inASizePSetpensize(ASizePSetpensize node)
    {
        defaultIn(node);
    }

    public void outASizePSetpensize(ASizePSetpensize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizePSetpensize(ASizePSetpensize node)
    {
        inASizePSetpensize(node);
        if(node.getSetpensize() != null)
        {
            node.getSetpensize().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outASizePSetpensize(node);
    }

    public void inASizexyPSetpensize(ASizexyPSetpensize node)
    {
        defaultIn(node);
    }

    public void outASizexyPSetpensize(ASizexyPSetpensize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizexyPSetpensize(ASizexyPSetpensize node)
    {
        inASizexyPSetpensize(node);
        if(node.getSetpensize() != null)
        {
            node.getSetpensize().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASizexyPSetpensize(node);
    }

    public void inAPTo(APTo node)
    {
        defaultIn(node);
    }

    public void outAPTo(APTo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPTo(APTo node)
    {
        inAPTo(node);
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPInstructionlist() != null)
        {
            node.getPInstructionlist().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outAPTo(node);
    }

    public void inAPMake(APMake node)
    {
        defaultIn(node);
    }

    public void outAPMake(APMake node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPMake(APMake node)
    {
        inAPMake(node);
        if(node.getMake() != null)
        {
            node.getMake().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPMake(node);
    }

    public void inAPRepeat(APRepeat node)
    {
        defaultIn(node);
    }

    public void outAPRepeat(APRepeat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPRepeat(APRepeat node)
    {
        inAPRepeat(node);
        if(node.getRepeat() != null)
        {
            node.getRepeat().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getLBrk() != null)
        {
            node.getLBrk().apply(this);
        }
        if(node.getPInstructionlist() != null)
        {
            node.getPInstructionlist().apply(this);
        }
        if(node.getRBrk() != null)
        {
            node.getRBrk().apply(this);
        }
        outAPRepeat(node);
    }

    public void inAIfPIf(AIfPIf node)
    {
        defaultIn(node);
    }

    public void outAIfPIf(AIfPIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfPIf(AIfPIf node)
    {
        inAIfPIf(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getPBoolean() != null)
        {
            node.getPBoolean().apply(this);
        }
        if(node.getPInstructionlist() != null)
        {
            node.getPInstructionlist().apply(this);
        }
        outAIfPIf(node);
    }

    public void inAIfelsePIf(AIfelsePIf node)
    {
        defaultIn(node);
    }

    public void outAIfelsePIf(AIfelsePIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelsePIf(AIfelsePIf node)
    {
        inAIfelsePIf(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getPBoolean() != null)
        {
            node.getPBoolean().apply(this);
        }
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAIfelsePIf(node);
    }

    public void inAPIfelse(APIfelse node)
    {
        defaultIn(node);
    }

    public void outAPIfelse(APIfelse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPIfelse(APIfelse node)
    {
        inAPIfelse(node);
        if(node.getIfelse() != null)
        {
            node.getIfelse().apply(this);
        }
        if(node.getPBoolean() != null)
        {
            node.getPBoolean().apply(this);
        }
        if(node.getInst1() != null)
        {
            node.getInst1().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getInst2() != null)
        {
            node.getInst2().apply(this);
        }
        outAPIfelse(node);
    }

    public void inAPStop(APStop node)
    {
        defaultIn(node);
    }

    public void outAPStop(APStop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPStop(APStop node)
    {
        inAPStop(node);
        if(node.getStop() != null)
        {
            node.getStop().apply(this);
        }
        outAPStop(node);
    }

    public void inAPGoto(APGoto node)
    {
        defaultIn(node);
    }

    public void outAPGoto(APGoto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPGoto(APGoto node)
    {
        inAPGoto(node);
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPGoto(node);
    }

    public void inAIdentListPIdentList(AIdentListPIdentList node)
    {
        defaultIn(node);
    }

    public void outAIdentListPIdentList(AIdentListPIdentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentListPIdentList(AIdentListPIdentList node)
    {
        inAIdentListPIdentList(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPIdentList() != null)
        {
            node.getPIdentList().apply(this);
        }
        outAIdentListPIdentList(node);
    }

    public void inAIdentPIdentList(AIdentPIdentList node)
    {
        defaultIn(node);
    }

    public void outAIdentPIdentList(AIdentPIdentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentPIdentList(AIdentPIdentList node)
    {
        inAIdentPIdentList(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentPIdentList(node);
    }

    public void inAIntPValue(AIntPValue node)
    {
        defaultIn(node);
    }

    public void outAIntPValue(AIntPValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntPValue(AIntPValue node)
    {
        inAIntPValue(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntPValue(node);
    }

    public void inADobPValue(ADobPValue node)
    {
        defaultIn(node);
    }

    public void outADobPValue(ADobPValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADobPValue(ADobPValue node)
    {
        inADobPValue(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outADobPValue(node);
    }

    public void inAValueListPValueList(AValueListPValueList node)
    {
        defaultIn(node);
    }

    public void outAValueListPValueList(AValueListPValueList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueListPValueList(AValueListPValueList node)
    {
        inAValueListPValueList(node);
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPValueList() != null)
        {
            node.getPValueList().apply(this);
        }
        outAValueListPValueList(node);
    }

    public void inAValuePValueList(AValuePValueList node)
    {
        defaultIn(node);
    }

    public void outAValuePValueList(AValuePValueList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValuePValueList(AValuePValueList node)
    {
        inAValuePValueList(node);
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAValuePValueList(node);
    }

    public void inASumValPSumList(ASumValPSumList node)
    {
        defaultIn(node);
    }

    public void outASumValPSumList(ASumValPSumList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASumValPSumList(ASumValPSumList node)
    {
        inASumValPSumList(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outASumValPSumList(node);
    }

    public void inASumListPSumList(ASumListPSumList node)
    {
        defaultIn(node);
    }

    public void outASumListPSumList(ASumListPSumList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASumListPSumList(ASumListPSumList node)
    {
        inASumListPSumList(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPSumList() != null)
        {
            node.getPSumList().apply(this);
        }
        outASumListPSumList(node);
    }

    public void inADifValPDifList(ADifValPDifList node)
    {
        defaultIn(node);
    }

    public void outADifValPDifList(ADifValPDifList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifValPDifList(ADifValPDifList node)
    {
        inADifValPDifList(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outADifValPDifList(node);
    }

    public void inADifListPDifList(ADifListPDifList node)
    {
        defaultIn(node);
    }

    public void outADifListPDifList(ADifListPDifList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifListPDifList(ADifListPDifList node)
    {
        inADifListPDifList(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPDifList() != null)
        {
            node.getPDifList().apply(this);
        }
        outADifListPDifList(node);
    }

    public void inAMultValPMultList(AMultValPMultList node)
    {
        defaultIn(node);
    }

    public void outAMultValPMultList(AMultValPMultList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultValPMultList(AMultValPMultList node)
    {
        inAMultValPMultList(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAMultValPMultList(node);
    }

    public void inAMultListPMultList(AMultListPMultList node)
    {
        defaultIn(node);
    }

    public void outAMultListPMultList(AMultListPMultList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultListPMultList(AMultListPMultList node)
    {
        inAMultListPMultList(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPMultList() != null)
        {
            node.getPMultList().apply(this);
        }
        outAMultListPMultList(node);
    }

    public void inATruePBoolean(ATruePBoolean node)
    {
        defaultIn(node);
    }

    public void outATruePBoolean(ATruePBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATruePBoolean(ATruePBoolean node)
    {
        inATruePBoolean(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATruePBoolean(node);
    }

    public void inAFalsePBoolean(AFalsePBoolean node)
    {
        defaultIn(node);
    }

    public void outAFalsePBoolean(AFalsePBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalsePBoolean(AFalsePBoolean node)
    {
        inAFalsePBoolean(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalsePBoolean(node);
    }

    public void inAVarPBoolean(AVarPBoolean node)
    {
        defaultIn(node);
    }

    public void outAVarPBoolean(AVarPBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarPBoolean(AVarPBoolean node)
    {
        inAVarPBoolean(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarPBoolean(node);
    }

    public void inAPredefPColor(APredefPColor node)
    {
        defaultIn(node);
    }

    public void outAPredefPColor(APredefPColor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPredefPColor(APredefPColor node)
    {
        inAPredefPColor(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAPredefPColor(node);
    }

    public void inALstPColor(ALstPColor node)
    {
        defaultIn(node);
    }

    public void outALstPColor(ALstPColor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALstPColor(ALstPColor node)
    {
        inALstPColor(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALstPColor(node);
    }
}
