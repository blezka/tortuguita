/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.node;

import comp.logo.analysis.*;

@SuppressWarnings("nls")
public final class AButfirstPButfirst extends PPButfirst
{
    private TButfirst _butfirst_;
    private PPThing _pThing_;

    public AButfirstPButfirst()
    {
        // Constructor
    }

    public AButfirstPButfirst(
        @SuppressWarnings("hiding") TButfirst _butfirst_,
        @SuppressWarnings("hiding") PPThing _pThing_)
    {
        // Constructor
        setButfirst(_butfirst_);

        setPThing(_pThing_);

    }

    @Override
    public Object clone()
    {
        return new AButfirstPButfirst(
            cloneNode(this._butfirst_),
            cloneNode(this._pThing_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAButfirstPButfirst(this);
    }

    public TButfirst getButfirst()
    {
        return this._butfirst_;
    }

    public void setButfirst(TButfirst node)
    {
        if(this._butfirst_ != null)
        {
            this._butfirst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._butfirst_ = node;
    }

    public PPThing getPThing()
    {
        return this._pThing_;
    }

    public void setPThing(PPThing node)
    {
        if(this._pThing_ != null)
        {
            this._pThing_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pThing_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._butfirst_)
            + toString(this._pThing_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._butfirst_ == child)
        {
            this._butfirst_ = null;
            return;
        }

        if(this._pThing_ == child)
        {
            this._pThing_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._butfirst_ == oldChild)
        {
            setButfirst((TButfirst) newChild);
            return;
        }

        if(this._pThing_ == oldChild)
        {
            setPThing((PPThing) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
