/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.node;

import comp.logo.analysis.*;

@SuppressWarnings("nls")
public final class APRound extends PPRound
{
    private TRound _round_;
    private PPValue _pValue_;

    public APRound()
    {
        // Constructor
    }

    public APRound(
        @SuppressWarnings("hiding") TRound _round_,
        @SuppressWarnings("hiding") PPValue _pValue_)
    {
        // Constructor
        setRound(_round_);

        setPValue(_pValue_);

    }

    @Override
    public Object clone()
    {
        return new APRound(
            cloneNode(this._round_),
            cloneNode(this._pValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPRound(this);
    }

    public TRound getRound()
    {
        return this._round_;
    }

    public void setRound(TRound node)
    {
        if(this._round_ != null)
        {
            this._round_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._round_ = node;
    }

    public PPValue getPValue()
    {
        return this._pValue_;
    }

    public void setPValue(PPValue node)
    {
        if(this._pValue_ != null)
        {
            this._pValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._round_)
            + toString(this._pValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._round_ == child)
        {
            this._round_ = null;
            return;
        }

        if(this._pValue_ == child)
        {
            this._pValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._round_ == oldChild)
        {
            setRound((TRound) newChild);
            return;
        }

        if(this._pValue_ == oldChild)
        {
            setPValue((PPValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
