/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.node;

import comp.logo.analysis.*;

@SuppressWarnings("nls")
public final class APIfelse extends PPIfelse
{
    private TIfelse _ifelse_;
    private PPBoolean _pBoolean_;
    private PPInstructionlist _inst1_;
    private TComma _comma_;
    private PPInstructionlist _inst2_;

    public APIfelse()
    {
        // Constructor
    }

    public APIfelse(
        @SuppressWarnings("hiding") TIfelse _ifelse_,
        @SuppressWarnings("hiding") PPBoolean _pBoolean_,
        @SuppressWarnings("hiding") PPInstructionlist _inst1_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PPInstructionlist _inst2_)
    {
        // Constructor
        setIfelse(_ifelse_);

        setPBoolean(_pBoolean_);

        setInst1(_inst1_);

        setComma(_comma_);

        setInst2(_inst2_);

    }

    @Override
    public Object clone()
    {
        return new APIfelse(
            cloneNode(this._ifelse_),
            cloneNode(this._pBoolean_),
            cloneNode(this._inst1_),
            cloneNode(this._comma_),
            cloneNode(this._inst2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPIfelse(this);
    }

    public TIfelse getIfelse()
    {
        return this._ifelse_;
    }

    public void setIfelse(TIfelse node)
    {
        if(this._ifelse_ != null)
        {
            this._ifelse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifelse_ = node;
    }

    public PPBoolean getPBoolean()
    {
        return this._pBoolean_;
    }

    public void setPBoolean(PPBoolean node)
    {
        if(this._pBoolean_ != null)
        {
            this._pBoolean_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pBoolean_ = node;
    }

    public PPInstructionlist getInst1()
    {
        return this._inst1_;
    }

    public void setInst1(PPInstructionlist node)
    {
        if(this._inst1_ != null)
        {
            this._inst1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inst1_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PPInstructionlist getInst2()
    {
        return this._inst2_;
    }

    public void setInst2(PPInstructionlist node)
    {
        if(this._inst2_ != null)
        {
            this._inst2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inst2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifelse_)
            + toString(this._pBoolean_)
            + toString(this._inst1_)
            + toString(this._comma_)
            + toString(this._inst2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifelse_ == child)
        {
            this._ifelse_ = null;
            return;
        }

        if(this._pBoolean_ == child)
        {
            this._pBoolean_ = null;
            return;
        }

        if(this._inst1_ == child)
        {
            this._inst1_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._inst2_ == child)
        {
            this._inst2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifelse_ == oldChild)
        {
            setIfelse((TIfelse) newChild);
            return;
        }

        if(this._pBoolean_ == oldChild)
        {
            setPBoolean((PPBoolean) newChild);
            return;
        }

        if(this._inst1_ == oldChild)
        {
            setInst1((PPInstructionlist) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._inst2_ == oldChild)
        {
            setInst2((PPInstructionlist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
