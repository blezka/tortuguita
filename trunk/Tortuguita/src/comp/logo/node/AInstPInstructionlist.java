/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.node;

import comp.logo.analysis.*;

@SuppressWarnings("nls")
public final class AInstPInstructionlist extends PPInstructionlist
{
    private PPInstruction _pInstruction_;
    private TSemi _semi_;

    public AInstPInstructionlist()
    {
        // Constructor
    }

    public AInstPInstructionlist(
        @SuppressWarnings("hiding") PPInstruction _pInstruction_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setPInstruction(_pInstruction_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new AInstPInstructionlist(
            cloneNode(this._pInstruction_),
            cloneNode(this._semi_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstPInstructionlist(this);
    }

    public PPInstruction getPInstruction()
    {
        return this._pInstruction_;
    }

    public void setPInstruction(PPInstruction node)
    {
        if(this._pInstruction_ != null)
        {
            this._pInstruction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pInstruction_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pInstruction_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pInstruction_ == child)
        {
            this._pInstruction_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pInstruction_ == oldChild)
        {
            setPInstruction((PPInstruction) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
