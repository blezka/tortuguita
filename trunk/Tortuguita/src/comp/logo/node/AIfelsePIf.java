/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.node;

import comp.logo.analysis.*;

@SuppressWarnings("nls")
public final class AIfelsePIf extends PPIf
{
    private TIf _if_;
    private PPBoolean _pBoolean_;
    private PPInstructionlist _true_;
    private TComma _comma_;
    private PPInstructionlist _false_;

    public AIfelsePIf()
    {
        // Constructor
    }

    public AIfelsePIf(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PPBoolean _pBoolean_,
        @SuppressWarnings("hiding") PPInstructionlist _true_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PPInstructionlist _false_)
    {
        // Constructor
        setIf(_if_);

        setPBoolean(_pBoolean_);

        setTrue(_true_);

        setComma(_comma_);

        setFalse(_false_);

    }

    @Override
    public Object clone()
    {
        return new AIfelsePIf(
            cloneNode(this._if_),
            cloneNode(this._pBoolean_),
            cloneNode(this._true_),
            cloneNode(this._comma_),
            cloneNode(this._false_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfelsePIf(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PPBoolean getPBoolean()
    {
        return this._pBoolean_;
    }

    public void setPBoolean(PPBoolean node)
    {
        if(this._pBoolean_ != null)
        {
            this._pBoolean_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pBoolean_ = node;
    }

    public PPInstructionlist getTrue()
    {
        return this._true_;
    }

    public void setTrue(PPInstructionlist node)
    {
        if(this._true_ != null)
        {
            this._true_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._true_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PPInstructionlist getFalse()
    {
        return this._false_;
    }

    public void setFalse(PPInstructionlist node)
    {
        if(this._false_ != null)
        {
            this._false_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._false_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._pBoolean_)
            + toString(this._true_)
            + toString(this._comma_)
            + toString(this._false_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._pBoolean_ == child)
        {
            this._pBoolean_ = null;
            return;
        }

        if(this._true_ == child)
        {
            this._true_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._false_ == child)
        {
            this._false_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._pBoolean_ == oldChild)
        {
            setPBoolean((PPBoolean) newChild);
            return;
        }

        if(this._true_ == oldChild)
        {
            setTrue((PPInstructionlist) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._false_ == oldChild)
        {
            setFalse((PPInstructionlist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
