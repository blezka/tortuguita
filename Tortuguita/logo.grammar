Package 
	src.comp.logo;
Helpers
 letter = ['a'..'z'] | ['A'..'Z'];
 number = ['0'..'9'];
 anychar = [0x0..0xffff];
 cr = 13;
 lf = 10;
 tab = 8;
 underscore = 95;
 eol = (cr | lf | cr lf);
 
Tokens
 procname = 'PROCNAME';
 word = 'WORD';
 list = 'LIST';
 first = 'FIRST';
 butfirst = 'BUTFIRST';
 bf = 'BF';
 last = 'LAST';
 setitem = 'SETITEM';
 push = 'PUSH';
 pop = 'POP';
 print = 'PRINT';
 pr = 'PR';
 sum = 'SUM';
 difference = 'DIFFERENCE';
 minus = 'MINUS';
 product = 'PRODUCT';
 modulo = 'MODULO';
 int = 'INT';
//// Ale
 round = 'ROUND';
 sqrt = 'SQRT';
 power = 'POWER';
 exp = 'EXP';
 and = 'AND';
 or = 'OR';
 not = 'NOT';
 forward = 'FORWARD';
 fd = 'FD';
 back = 'BACK';
 bk = 'BK';
 left = 'LEFT';
 lf = 'LF';
 right = 'RIGHT';
 rt = 'RT';
 setpos = 'SETPOS';
 setxy = 'SETXY';
 setx  = 'SETX';
 sety  = 'SETY';
 ////jonathan
 setheading = 'SETHEADING';
 seth = 'SETH';
 home = 'HOME';
 arc = 'ARC';
 clearscreen = 'CLEARSCREEN';
 cs = 'CS';
 pendown = 'PENDOWN';
 pd = 'PD';
 penup   = 'PENUP';
 pu = 'PU';
 setpencolor = 'SETPENCOLOR';
 setpc = 'SETPC';
 setpensize = 'SETPENSIZE';
 to = 'TO';
 make = 'MAKE';
 run = 'RUN';
 repeat = 'REPEAT';
 if = 'IF';
 ifelse = 'IFELSE';
 stop = 'STOP';
 goto = 'GOTO';
 end = 'END';
 true = 'TRUE';
 false = 'FALSE';
//////////////////////////////////////////////
 l_par = '(';
 r_par = ')';
 l_brk = '[';
 r_brk = ']';
 l_key = '{';
 r_key = '}';
 plus = '+';
 min = '-';
 div = '/';
 mult = '*';
 semi = ';';
 comma = ',';
 
 identifier = (letter | underscore (letter | number))(letter | number | underscore)*;
 integer = [number - 0] number*;
 double = number* '.' number+;
 //hex = '0x' (number | ['a'..'f'] | ['A'..'F'])+;
 number1= number | '1' ['0'..'5'];  

 
 endline = eol?;
 
 comment = '#' [anychar - [cr + lf]]* eol?;
 blank = (' ' | tab | eol);
Ignored Tokens
 comment , blank ;
 
Productions
 prog 			= {list}p_instructionlist | {run}  run p_instructionlist;
 p_instructionlist = {blabla} p_instruction semi p_instructionlist| {bla}p_instruction; 
 p_instruction  = {primitives} p_primitives |
 				{comunication} p_communication |
 				{arithmetic} p_arithmetic |
 				{logic} p_logic |
 				{graphics} p_graphics |
 				{workspace} p_workspace |
 				{control} p_control_structures;
 			
 p_primitives   = {vars}p_word | {list} p_list | 
  				{selectors} p_selectors |
  				{mutator} p_mutator;
 p_selectors    = {first} p_first |
  				{butfirst} p_butfirst |
  				{last} p_last;
 p_mutator		= {set} p_setitem ;
 // 				{push} p_push |
 // 				{pop} p_pop ;
 p_communication = p_print;
 p_arithmetic = {sum} p_sum |
  				{difference} p_difference |
  				{minus} p_minus |
  				{product} p_product |
  				{modulo} p_modulo |
  				{int} p_int |
  				{round} p_round |
  				{sqrt} p_sqrt |
  				{power} p_power |
  				{exp} p_exp;
 p_logic		= {and} p_and |
   				{or} p_or |
   				{not} p_not;   				
 p_graphics		= {fd} p_forward|
 				{bk} p_back | 
 				{lt} p_left |
 				{rt} p_right|
 				{setpos} p_setpos|
 				{setxy} p_setxy|
 				{setx} p_setx|
 				{sety} p_sety|
 				{seth} p_setheading|
 				{home} p_home|
 				{arc} p_arc |
 				{clr} p_clearscreen |
 				{penctrl} p_pencontrol;
 p_pencontrol 	= {pd} p_pendown |
 				{pu} p_penup |
 				{setpc} p_setpencolor|
 				{setpensize} p_setpensize;
 p_workspace	= {to} p_to |
				{make} p_make;
 p_control_structures = {repeat} p_repeat |
 				{if} p_if |
 				{ifelse} p_ifelse |
 				{stop} p_stop|
 				{goto} p_goto; 
         
 
  			
 p_word        = word identifier p_ident_list;
 p_list        = list identifier p_ident_list;
 p_first       = first p_thing;
 p_butfirst    = {butfirst} butfirst p_thing | {bf} bf p_thing;
 p_last        = last p_thing;
 p_setitem     = setitem integer p_list p_value;
 //p_push        = push identifier p_thing;
 //p_pop         = pop p_list;
 p_print       = print p_print_list;
 p_print_list  = l_par p_ident_list r_par;
 p_sum         = {sum}sum p_value p_value_list | {plus} p_value p_sum_list;
 p_difference  = {dif}difference p_value p_value_list | {min}p_value p_dif_list;
 p_minus       = {minus}minus p_value | {min}min p_value;
 p_product     = {prod}product p_value  p_value_list | {mult}p_value p_mult_list;
 p_modulo      = modulo [div]:integer [divd]:integer;
 p_int         = int p_value;
 p_round       = round p_value;
 p_sqrt        = sqrt p_value;
 p_power       = power [base]:p_value [exp]:p_value; 
 p_exp         = exp p_value;
 p_and         = and [v1]:p_boolean [v2]:p_boolean;  
 p_or          = or [v1]:p_boolean [v2]:p_boolean; 
 p_not         = not [v1]:p_boolean; 
 
 //PROBLEMA AQUI, cambio la primera linea pero ya ven como siguen las demas
 p_forward     = {forward} forward p_value | {fd} fd p_value; 
 p_back        = {back} back p_value | {bk} bk p_value; 
 p_left        = {left} left p_value | {lt} lt p_value;                 
 p_right       = {right} right | {rt} rt p_value; 
 p_setpos      = setpos p_list; 
 p_setxy       = setxy [base]:p_value [exp]:p_value; 
 p_setx        = setx p_value; 
 p_sety        = sety p_value;
 p_setheading  =  {setheading} setheading | {seth} seth p_value;
 p_home        =  home;
 p_arc         =  arc integer p_value;
 p_clearscreen =  {clearscreen}clearscreen|{cs}cs p_home;
 p_pendown     =  {pendown}pendown|{pd} pd;
 p_penup       =  {penup}penup|{pu}pu;
 p_setpencolor =  {setpencolor} setpencolor| {setpc} setpc number1;
 p_setpensize  =  setpensize integer;
 p_to          =  to identifier p_ident_list p_instructionlist end; 
 p_make        =  make p_word integer;
 p_repeat      = repeat integer  l_brk p_instructionlist r_brk;
 p_if		   = if p_boolean p_instructionlist;
 p_ifelse	   = ifelse p_boolean [inst1]:p_instructionlist [inst2]:p_instructionlist;;
 p_stop        = stop;
 p_goto        = goto p_word;
 
 
 
//Producciones auxiliares de la gramatica 

 p_ident_list  = {ident_list} identifier comma p_ident_list | {ident} identifier;
 p_thing       = identifier;
 //p_thing_list  = {thing}  | {lst} p_thing p_thing_list;
 p_value       = {int}integer | {dob}double;
 p_value_list  = {value_list} p_value p_value_list | {value} p_value;
 p_sum_list    = {sum_val} plus p_value | {sum_list} plus p_value p_sum_list;
 p_dif_list    = {dif_val} min p_value | {dif_list} min p_value p_dif_list;
 p_mult_list   = {mult_val} mult p_value | {mult_list} mult p_value p_mult_list;
 p_boolean     = {true} true | {false} false;
