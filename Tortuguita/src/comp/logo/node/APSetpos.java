/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.node;

import comp.logo.analysis.*;

@SuppressWarnings("nls")
public final class APSetpos extends PPSetpos
{
    private TSetpos _setpos_;
    private TIdentifier _identifier_;

    public APSetpos()
    {
        // Constructor
    }

    public APSetpos(
        @SuppressWarnings("hiding") TSetpos _setpos_,
        @SuppressWarnings("hiding") TIdentifier _identifier_)
    {
        // Constructor
        setSetpos(_setpos_);

        setIdentifier(_identifier_);

    }

    @Override
    public Object clone()
    {
        return new APSetpos(
            cloneNode(this._setpos_),
            cloneNode(this._identifier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPSetpos(this);
    }

    public TSetpos getSetpos()
    {
        return this._setpos_;
    }

    public void setSetpos(TSetpos node)
    {
        if(this._setpos_ != null)
        {
            this._setpos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._setpos_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._setpos_)
            + toString(this._identifier_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._setpos_ == child)
        {
            this._setpos_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._setpos_ == oldChild)
        {
            setSetpos((TSetpos) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
