/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.node;

import comp.logo.analysis.*;

@SuppressWarnings("nls")
public final class ALtPLeft extends PPLeft
{
    private TLf _lf_;
    private TInteger _integer_;

    public ALtPLeft()
    {
        // Constructor
    }

    public ALtPLeft(
        @SuppressWarnings("hiding") TLf _lf_,
        @SuppressWarnings("hiding") TInteger _integer_)
    {
        // Constructor
        setLf(_lf_);

        setInteger(_integer_);

    }

    @Override
    public Object clone()
    {
        return new ALtPLeft(
            cloneNode(this._lf_),
            cloneNode(this._integer_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALtPLeft(this);
    }

    public TLf getLf()
    {
        return this._lf_;
    }

    public void setLf(TLf node)
    {
        if(this._lf_ != null)
        {
            this._lf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lf_ = node;
    }

    public TInteger getInteger()
    {
        return this._integer_;
    }

    public void setInteger(TInteger node)
    {
        if(this._integer_ != null)
        {
            this._integer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._integer_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lf_)
            + toString(this._integer_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lf_ == child)
        {
            this._lf_ = null;
            return;
        }

        if(this._integer_ == child)
        {
            this._integer_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lf_ == oldChild)
        {
            setLf((TLf) newChild);
            return;
        }

        if(this._integer_ == oldChild)
        {
            setInteger((TInteger) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
