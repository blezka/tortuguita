/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.node;

import comp.logo.analysis.*;

@SuppressWarnings("nls")
public final class ARunProg extends PProg
{
    private TRun _run_;
    private TLKey _lKey_;
    private PPInstructionlist _pInstructionlist_;
    private TRKey _rKey_;
    private TSemi _semi_;

    public ARunProg()
    {
        // Constructor
    }

    public ARunProg(
        @SuppressWarnings("hiding") TRun _run_,
        @SuppressWarnings("hiding") TLKey _lKey_,
        @SuppressWarnings("hiding") PPInstructionlist _pInstructionlist_,
        @SuppressWarnings("hiding") TRKey _rKey_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setRun(_run_);

        setLKey(_lKey_);

        setPInstructionlist(_pInstructionlist_);

        setRKey(_rKey_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new ARunProg(
            cloneNode(this._run_),
            cloneNode(this._lKey_),
            cloneNode(this._pInstructionlist_),
            cloneNode(this._rKey_),
            cloneNode(this._semi_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARunProg(this);
    }

    public TRun getRun()
    {
        return this._run_;
    }

    public void setRun(TRun node)
    {
        if(this._run_ != null)
        {
            this._run_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._run_ = node;
    }

    public TLKey getLKey()
    {
        return this._lKey_;
    }

    public void setLKey(TLKey node)
    {
        if(this._lKey_ != null)
        {
            this._lKey_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lKey_ = node;
    }

    public PPInstructionlist getPInstructionlist()
    {
        return this._pInstructionlist_;
    }

    public void setPInstructionlist(PPInstructionlist node)
    {
        if(this._pInstructionlist_ != null)
        {
            this._pInstructionlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pInstructionlist_ = node;
    }

    public TRKey getRKey()
    {
        return this._rKey_;
    }

    public void setRKey(TRKey node)
    {
        if(this._rKey_ != null)
        {
            this._rKey_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rKey_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._run_)
            + toString(this._lKey_)
            + toString(this._pInstructionlist_)
            + toString(this._rKey_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._run_ == child)
        {
            this._run_ = null;
            return;
        }

        if(this._lKey_ == child)
        {
            this._lKey_ = null;
            return;
        }

        if(this._pInstructionlist_ == child)
        {
            this._pInstructionlist_ = null;
            return;
        }

        if(this._rKey_ == child)
        {
            this._rKey_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._run_ == oldChild)
        {
            setRun((TRun) newChild);
            return;
        }

        if(this._lKey_ == oldChild)
        {
            setLKey((TLKey) newChild);
            return;
        }

        if(this._pInstructionlist_ == oldChild)
        {
            setPInstructionlist((PPInstructionlist) newChild);
            return;
        }

        if(this._rKey_ == oldChild)
        {
            setRKey((TRKey) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
