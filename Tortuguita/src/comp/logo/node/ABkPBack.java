/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.node;

import comp.logo.analysis.*;

@SuppressWarnings("nls")
public final class ABkPBack extends PPBack
{
    private TBk _bk_;
    private TInteger _integer_;

    public ABkPBack()
    {
        // Constructor
    }

    public ABkPBack(
        @SuppressWarnings("hiding") TBk _bk_,
        @SuppressWarnings("hiding") TInteger _integer_)
    {
        // Constructor
        setBk(_bk_);

        setInteger(_integer_);

    }

    @Override
    public Object clone()
    {
        return new ABkPBack(
            cloneNode(this._bk_),
            cloneNode(this._integer_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABkPBack(this);
    }

    public TBk getBk()
    {
        return this._bk_;
    }

    public void setBk(TBk node)
    {
        if(this._bk_ != null)
        {
            this._bk_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bk_ = node;
    }

    public TInteger getInteger()
    {
        return this._integer_;
    }

    public void setInteger(TInteger node)
    {
        if(this._integer_ != null)
        {
            this._integer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._integer_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._bk_)
            + toString(this._integer_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._bk_ == child)
        {
            this._bk_ = null;
            return;
        }

        if(this._integer_ == child)
        {
            this._integer_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._bk_ == oldChild)
        {
            setBk((TBk) newChild);
            return;
        }

        if(this._integer_ == oldChild)
        {
            setInteger((TInteger) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
