/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.node;

import comp.logo.analysis.*;

@SuppressWarnings("nls")
public final class APTo extends PPTo
{
    private TTo _to_;
    private TIdentifier _identifier_;
    private PPInstructionlist _pInstructionlist_;
    private TEnd _end_;

    public APTo()
    {
        // Constructor
    }

    public APTo(
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PPInstructionlist _pInstructionlist_,
        @SuppressWarnings("hiding") TEnd _end_)
    {
        // Constructor
        setTo(_to_);

        setIdentifier(_identifier_);

        setPInstructionlist(_pInstructionlist_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new APTo(
            cloneNode(this._to_),
            cloneNode(this._identifier_),
            cloneNode(this._pInstructionlist_),
            cloneNode(this._end_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPTo(this);
    }

    public TTo getTo()
    {
        return this._to_;
    }

    public void setTo(TTo node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PPInstructionlist getPInstructionlist()
    {
        return this._pInstructionlist_;
    }

    public void setPInstructionlist(PPInstructionlist node)
    {
        if(this._pInstructionlist_ != null)
        {
            this._pInstructionlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pInstructionlist_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._to_)
            + toString(this._identifier_)
            + toString(this._pInstructionlist_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._pInstructionlist_ == child)
        {
            this._pInstructionlist_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._to_ == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._pInstructionlist_ == oldChild)
        {
            setPInstructionlist((PPInstructionlist) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
