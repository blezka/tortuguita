/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.parser;

import comp.logo.lexer.*;
import comp.logo.node.*;
import comp.logo.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce APWord */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce APList */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce APFirst */
		    {
			ArrayList list = new2();
			push(goTo(2), list, false);
		    }
		    break;
                    case 3: /* reduce AButfirstPButfirst */
		    {
			ArrayList list = new3();
			push(goTo(3), list, false);
		    }
		    break;
                    case 4: /* reduce ABfPButfirst */
		    {
			ArrayList list = new4();
			push(goTo(3), list, false);
		    }
		    break;
                    case 5: /* reduce APLast */
		    {
			ArrayList list = new5();
			push(goTo(4), list, false);
		    }
		    break;
                    case 6: /* reduce APSetitem */
		    {
			ArrayList list = new6();
			push(goTo(5), list, false);
		    }
		    break;
                    case 7: /* reduce APPush */
		    {
			ArrayList list = new7();
			push(goTo(6), list, false);
		    }
		    break;
                    case 8: /* reduce APPop */
		    {
			ArrayList list = new8();
			push(goTo(7), list, false);
		    }
		    break;
                    case 9: /* reduce APrintPPrint */
		    {
			ArrayList list = new9();
			push(goTo(8), list, false);
		    }
		    break;
                    case 10: /* reduce APrPPrint */
		    {
			ArrayList list = new10();
			push(goTo(8), list, false);
		    }
		    break;
                    case 11: /* reduce ASumPSum */
		    {
			ArrayList list = new11();
			push(goTo(9), list, false);
		    }
		    break;
                    case 12: /* reduce APlusPSum */
		    {
			ArrayList list = new12();
			push(goTo(9), list, false);
		    }
		    break;
                    case 13: /* reduce ADifPDifference */
		    {
			ArrayList list = new13();
			push(goTo(10), list, false);
		    }
		    break;
                    case 14: /* reduce AMinPDifference */
		    {
			ArrayList list = new14();
			push(goTo(10), list, false);
		    }
		    break;
                    case 15: /* reduce AMinusPMinus */
		    {
			ArrayList list = new15();
			push(goTo(11), list, false);
		    }
		    break;
                    case 16: /* reduce AMinPMinus */
		    {
			ArrayList list = new16();
			push(goTo(11), list, false);
		    }
		    break;
                    case 17: /* reduce AProdPProduct */
		    {
			ArrayList list = new17();
			push(goTo(12), list, false);
		    }
		    break;
                    case 18: /* reduce AMultPProduct */
		    {
			ArrayList list = new18();
			push(goTo(12), list, false);
		    }
		    break;
                    case 19: /* reduce APModulo */
		    {
			ArrayList list = new19();
			push(goTo(13), list, false);
		    }
		    break;
                    case 20: /* reduce APInt */
		    {
			ArrayList list = new20();
			push(goTo(14), list, false);
		    }
		    break;
                    case 21: /* reduce AIdentListPIdentList */
		    {
			ArrayList list = new21();
			push(goTo(15), list, false);
		    }
		    break;
                    case 22: /* reduce AIdentPIdentList */
		    {
			ArrayList list = new22();
			push(goTo(15), list, false);
		    }
		    break;
                    case 23: /* reduce AWordPThing */
		    {
			ArrayList list = new23();
			push(goTo(16), list, false);
		    }
		    break;
                    case 24: /* reduce AListPThing */
		    {
			ArrayList list = new24();
			push(goTo(16), list, false);
		    }
		    break;
                    case 25: /* reduce AThingPThingList */
		    {
			ArrayList list = new25();
			push(goTo(17), list, false);
		    }
		    break;
                    case 26: /* reduce ALstPThingList */
		    {
			ArrayList list = new26();
			push(goTo(17), list, false);
		    }
		    break;
                    case 27: /* reduce AIntPValue */
		    {
			ArrayList list = new27();
			push(goTo(18), list, false);
		    }
		    break;
                    case 28: /* reduce ADobPValue */
		    {
			ArrayList list = new28();
			push(goTo(18), list, false);
		    }
		    break;
                    case 29: /* reduce AValueListPValueList */
		    {
			ArrayList list = new29();
			push(goTo(19), list, false);
		    }
		    break;
                    case 30: /* reduce AValuePValueList */
		    {
			ArrayList list = new30();
			push(goTo(19), list, false);
		    }
		    break;
                    case 31: /* reduce ASumValPSumList */
		    {
			ArrayList list = new31();
			push(goTo(20), list, false);
		    }
		    break;
                    case 32: /* reduce ASumListPSumList */
		    {
			ArrayList list = new32();
			push(goTo(20), list, false);
		    }
		    break;
                    case 33: /* reduce ADifValPDifList */
		    {
			ArrayList list = new33();
			push(goTo(21), list, false);
		    }
		    break;
                    case 34: /* reduce ADifListPDifList */
		    {
			ArrayList list = new34();
			push(goTo(21), list, false);
		    }
		    break;
                    case 35: /* reduce AMultValPMultList */
		    {
			ArrayList list = new35();
			push(goTo(22), list, false);
		    }
		    break;
                    case 36: /* reduce AMultListPMultList */
		    {
			ArrayList list = new36();
			push(goTo(22), list, false);
		    }
		    break;
                    case 37: /* reduce APModv */
		    {
			ArrayList list = new37();
			push(goTo(23), list, false);
		    }
		    break;
                    case 38: /* reduce APRound */
		    {
			ArrayList list = new38();
			push(goTo(24), list, false);
		    }
		    break;
                    case 39: /* reduce APSqrt */
		    {
			ArrayList list = new39();
			push(goTo(25), list, false);
		    }
		    break;
                    case 40: /* reduce APPower */
		    {
			ArrayList list = new40();
			push(goTo(26), list, false);
		    }
		    break;
                    case 41: /* reduce APExp */
		    {
			ArrayList list = new41();
			push(goTo(27), list, false);
		    }
		    break;
                    case 42: /* reduce ASetheadingPSetheading */
		    {
			ArrayList list = new42();
			push(goTo(28), list, false);
		    }
		    break;
                    case 43: /* reduce ASethPSetheading */
		    {
			ArrayList list = new43();
			push(goTo(28), list, false);
		    }
		    break;
                    case 44: /* reduce APHome */
		    {
			ArrayList list = new44();
			push(goTo(29), list, false);
		    }
		    break;
                    case 45: /* reduce APArc */
		    {
			ArrayList list = new45();
			push(goTo(30), list, false);
		    }
		    break;
                    case 46: /* reduce AClearscreenPClearscreen */
		    {
			ArrayList list = new46();
			push(goTo(31), list, false);
		    }
		    break;
                    case 47: /* reduce ACsPClearscreen */
		    {
			ArrayList list = new47();
			push(goTo(31), list, false);
		    }
		    break;
                    case 48: /* reduce APendownPPendown */
		    {
			ArrayList list = new48();
			push(goTo(32), list, false);
		    }
		    break;
                    case 49: /* reduce APdPPendown */
		    {
			ArrayList list = new49();
			push(goTo(32), list, false);
		    }
		    break;
                    case 50: /* reduce APenupPPenup */
		    {
			ArrayList list = new50();
			push(goTo(33), list, false);
		    }
		    break;
                    case 51: /* reduce APuPPenup */
		    {
			ArrayList list = new51();
			push(goTo(33), list, false);
		    }
		    break;
                    case 52: /* reduce ASetpencolorPSetpencolor */
		    {
			ArrayList list = new52();
			push(goTo(34), list, false);
		    }
		    break;
                    case 53: /* reduce ASetpcPSetpencolor */
		    {
			ArrayList list = new53();
			push(goTo(34), list, false);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPWord node1 = (PPWord) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce APWord */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPWord ppwordNode1;
        {
            // Block
        TWord twordNode2;
        TIdentifier tidentifierNode3;
        PPIdentList ppidentlistNode4;
        twordNode2 = (TWord)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        ppidentlistNode4 = (PPIdentList)nodeArrayList3.get(0);

        ppwordNode1 = new APWord(twordNode2, tidentifierNode3, ppidentlistNode4);
        }
	nodeList.add(ppwordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce APList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPList pplistNode1;
        {
            // Block
        TList tlistNode2;
        TIdentifier tidentifierNode3;
        PPIdentList ppidentlistNode4;
        tlistNode2 = (TList)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        ppidentlistNode4 = (PPIdentList)nodeArrayList3.get(0);

        pplistNode1 = new APList(tlistNode2, tidentifierNode3, ppidentlistNode4);
        }
	nodeList.add(pplistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce APFirst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPFirst ppfirstNode1;
        {
            // Block
        TFirst tfirstNode2;
        PPThing ppthingNode3;
        tfirstNode2 = (TFirst)nodeArrayList1.get(0);
        ppthingNode3 = (PPThing)nodeArrayList2.get(0);

        ppfirstNode1 = new APFirst(tfirstNode2, ppthingNode3);
        }
	nodeList.add(ppfirstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AButfirstPButfirst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPButfirst ppbutfirstNode1;
        {
            // Block
        TButfirst tbutfirstNode2;
        PPThing ppthingNode3;
        tbutfirstNode2 = (TButfirst)nodeArrayList1.get(0);
        ppthingNode3 = (PPThing)nodeArrayList2.get(0);

        ppbutfirstNode1 = new AButfirstPButfirst(tbutfirstNode2, ppthingNode3);
        }
	nodeList.add(ppbutfirstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ABfPButfirst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPButfirst ppbutfirstNode1;
        {
            // Block
        TBf tbfNode2;
        PPThing ppthingNode3;
        tbfNode2 = (TBf)nodeArrayList1.get(0);
        ppthingNode3 = (PPThing)nodeArrayList2.get(0);

        ppbutfirstNode1 = new ABfPButfirst(tbfNode2, ppthingNode3);
        }
	nodeList.add(ppbutfirstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce APLast */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPLast pplastNode1;
        {
            // Block
        TLast tlastNode2;
        PPThing ppthingNode3;
        tlastNode2 = (TLast)nodeArrayList1.get(0);
        ppthingNode3 = (PPThing)nodeArrayList2.get(0);

        pplastNode1 = new APLast(tlastNode2, ppthingNode3);
        }
	nodeList.add(pplastNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce APSetitem */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPSetitem ppsetitemNode1;
        {
            // Block
        TSetitem tsetitemNode2;
        TInteger tintegerNode3;
        PPList pplistNode4;
        PPValue ppvalueNode5;
        tsetitemNode2 = (TSetitem)nodeArrayList1.get(0);
        tintegerNode3 = (TInteger)nodeArrayList2.get(0);
        pplistNode4 = (PPList)nodeArrayList3.get(0);
        ppvalueNode5 = (PPValue)nodeArrayList4.get(0);

        ppsetitemNode1 = new APSetitem(tsetitemNode2, tintegerNode3, pplistNode4, ppvalueNode5);
        }
	nodeList.add(ppsetitemNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce APPush */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPPush pppushNode1;
        {
            // Block
        TPush tpushNode2;
        TIdentifier tidentifierNode3;
        PPThing ppthingNode4;
        tpushNode2 = (TPush)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        ppthingNode4 = (PPThing)nodeArrayList3.get(0);

        pppushNode1 = new APPush(tpushNode2, tidentifierNode3, ppthingNode4);
        }
	nodeList.add(pppushNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce APPop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPPop pppopNode1;
        {
            // Block
        TPop tpopNode2;
        PPList pplistNode3;
        tpopNode2 = (TPop)nodeArrayList1.get(0);
        pplistNode3 = (PPList)nodeArrayList2.get(0);

        pppopNode1 = new APPop(tpopNode2, pplistNode3);
        }
	nodeList.add(pppopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce APrintPPrint */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PPPrint ppprintNode1;
        {
            // Block

        ppprintNode1 = new APrintPPrint();
        }
	nodeList.add(ppprintNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce APrPPrint */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPPrint ppprintNode1;
        {
            // Block
        PPThingList ppthinglistNode2;
        ppthinglistNode2 = (PPThingList)nodeArrayList1.get(0);

        ppprintNode1 = new APrPPrint(ppthinglistNode2);
        }
	nodeList.add(ppprintNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ASumPSum */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPSum ppsumNode1;
        {
            // Block
        TSum tsumNode2;
        PPValue ppvalueNode3;
        PPValueList ppvaluelistNode4;
        tsumNode2 = (TSum)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);
        ppvaluelistNode4 = (PPValueList)nodeArrayList3.get(0);

        ppsumNode1 = new ASumPSum(tsumNode2, ppvalueNode3, ppvaluelistNode4);
        }
	nodeList.add(ppsumNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce APlusPSum */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPSum ppsumNode1;
        {
            // Block
        PPValue ppvalueNode2;
        PPSumList ppsumlistNode3;
        ppvalueNode2 = (PPValue)nodeArrayList1.get(0);
        ppsumlistNode3 = (PPSumList)nodeArrayList2.get(0);

        ppsumNode1 = new APlusPSum(ppvalueNode2, ppsumlistNode3);
        }
	nodeList.add(ppsumNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce ADifPDifference */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPDifference ppdifferenceNode1;
        {
            // Block
        TDifference tdifferenceNode2;
        PPValue ppvalueNode3;
        PPValueList ppvaluelistNode4;
        tdifferenceNode2 = (TDifference)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);
        ppvaluelistNode4 = (PPValueList)nodeArrayList3.get(0);

        ppdifferenceNode1 = new ADifPDifference(tdifferenceNode2, ppvalueNode3, ppvaluelistNode4);
        }
	nodeList.add(ppdifferenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AMinPDifference */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPDifference ppdifferenceNode1;
        {
            // Block
        PPValue ppvalueNode2;
        PPDifList ppdiflistNode3;
        ppvalueNode2 = (PPValue)nodeArrayList1.get(0);
        ppdiflistNode3 = (PPDifList)nodeArrayList2.get(0);

        ppdifferenceNode1 = new AMinPDifference(ppvalueNode2, ppdiflistNode3);
        }
	nodeList.add(ppdifferenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AMinusPMinus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPMinus ppminusNode1;
        {
            // Block
        TMinus tminusNode2;
        PPValue ppvalueNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);

        ppminusNode1 = new AMinusPMinus(tminusNode2, ppvalueNode3);
        }
	nodeList.add(ppminusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AMinPMinus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPMinus ppminusNode1;
        {
            // Block
        TMin tminNode2;
        PPValue ppvalueNode3;
        tminNode2 = (TMin)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);

        ppminusNode1 = new AMinPMinus(tminNode2, ppvalueNode3);
        }
	nodeList.add(ppminusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AProdPProduct */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPProduct ppproductNode1;
        {
            // Block
        TProduct tproductNode2;
        PPValue ppvalueNode3;
        PPValueList ppvaluelistNode4;
        tproductNode2 = (TProduct)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);
        ppvaluelistNode4 = (PPValueList)nodeArrayList3.get(0);

        ppproductNode1 = new AProdPProduct(tproductNode2, ppvalueNode3, ppvaluelistNode4);
        }
	nodeList.add(ppproductNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AMultPProduct */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPProduct ppproductNode1;
        {
            // Block
        PPValue ppvalueNode2;
        PPMultList ppmultlistNode3;
        ppvalueNode2 = (PPValue)nodeArrayList1.get(0);
        ppmultlistNode3 = (PPMultList)nodeArrayList2.get(0);

        ppproductNode1 = new AMultPProduct(ppvalueNode2, ppmultlistNode3);
        }
	nodeList.add(ppproductNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce APModulo */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPModulo ppmoduloNode1;
        {
            // Block
        TModulo tmoduloNode2;
        PPModv ppmodvNode3;
        TInteger tintegerNode4;
        tmoduloNode2 = (TModulo)nodeArrayList1.get(0);
        ppmodvNode3 = (PPModv)nodeArrayList2.get(0);
        tintegerNode4 = (TInteger)nodeArrayList3.get(0);

        ppmoduloNode1 = new APModulo(tmoduloNode2, ppmodvNode3, tintegerNode4);
        }
	nodeList.add(ppmoduloNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce APInt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPInt ppintNode1;
        {
            // Block
        TInt tintNode2;
        PPValue ppvalueNode3;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);

        ppintNode1 = new APInt(tintNode2, ppvalueNode3);
        }
	nodeList.add(ppintNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AIdentListPIdentList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPIdentList ppidentlistNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PPIdentList ppidentlistNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ppidentlistNode3 = (PPIdentList)nodeArrayList2.get(0);

        ppidentlistNode1 = new AIdentListPIdentList(tidentifierNode2, ppidentlistNode3);
        }
	nodeList.add(ppidentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AIdentPIdentList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPIdentList ppidentlistNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ppidentlistNode1 = new AIdentPIdentList(tidentifierNode2);
        }
	nodeList.add(ppidentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AWordPThing */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPThing ppthingNode1;
        {
            // Block
        PPWord ppwordNode2;
        ppwordNode2 = (PPWord)nodeArrayList1.get(0);

        ppthingNode1 = new AWordPThing(ppwordNode2);
        }
	nodeList.add(ppthingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AListPThing */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPThing ppthingNode1;
        {
            // Block
        PPList pplistNode2;
        pplistNode2 = (PPList)nodeArrayList1.get(0);

        ppthingNode1 = new AListPThing(pplistNode2);
        }
	nodeList.add(ppthingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AThingPThingList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPThingList ppthinglistNode1;
        {
            // Block
        PPThing ppthingNode2;
        ppthingNode2 = (PPThing)nodeArrayList1.get(0);

        ppthinglistNode1 = new AThingPThingList(ppthingNode2);
        }
	nodeList.add(ppthinglistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ALstPThingList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPThingList ppthinglistNode1;
        {
            // Block
        PPThingList ppthinglistNode2;
        ppthinglistNode2 = (PPThingList)nodeArrayList1.get(0);

        ppthinglistNode1 = new ALstPThingList(ppthinglistNode2);
        }
	nodeList.add(ppthinglistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AIntPValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPValue ppvalueNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ppvalueNode1 = new AIntPValue(tintegerNode2);
        }
	nodeList.add(ppvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ADobPValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPValue ppvalueNode1;
        {
            // Block
        TDouble tdoubleNode2;
        tdoubleNode2 = (TDouble)nodeArrayList1.get(0);

        ppvalueNode1 = new ADobPValue(tdoubleNode2);
        }
	nodeList.add(ppvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AValueListPValueList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPValueList ppvaluelistNode1;
        {
            // Block
        PPValue ppvalueNode2;
        PPValueList ppvaluelistNode3;
        ppvalueNode2 = (PPValue)nodeArrayList1.get(0);
        ppvaluelistNode3 = (PPValueList)nodeArrayList2.get(0);

        ppvaluelistNode1 = new AValueListPValueList(ppvalueNode2, ppvaluelistNode3);
        }
	nodeList.add(ppvaluelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AValuePValueList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPValueList ppvaluelistNode1;
        {
            // Block
        PPValue ppvalueNode2;
        ppvalueNode2 = (PPValue)nodeArrayList1.get(0);

        ppvaluelistNode1 = new AValuePValueList(ppvalueNode2);
        }
	nodeList.add(ppvaluelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ASumValPSumList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPSumList ppsumlistNode1;
        {
            // Block
        TPlus tplusNode2;
        PPValue ppvalueNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);

        ppsumlistNode1 = new ASumValPSumList(tplusNode2, ppvalueNode3);
        }
	nodeList.add(ppsumlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ASumListPSumList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPSumList ppsumlistNode1;
        {
            // Block
        TPlus tplusNode2;
        PPValue ppvalueNode3;
        PPSumList ppsumlistNode4;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);
        ppsumlistNode4 = (PPSumList)nodeArrayList3.get(0);

        ppsumlistNode1 = new ASumListPSumList(tplusNode2, ppvalueNode3, ppsumlistNode4);
        }
	nodeList.add(ppsumlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ADifValPDifList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPDifList ppdiflistNode1;
        {
            // Block
        TMin tminNode2;
        PPValue ppvalueNode3;
        tminNode2 = (TMin)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);

        ppdiflistNode1 = new ADifValPDifList(tminNode2, ppvalueNode3);
        }
	nodeList.add(ppdiflistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ADifListPDifList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPDifList ppdiflistNode1;
        {
            // Block
        TMin tminNode2;
        PPValue ppvalueNode3;
        PPDifList ppdiflistNode4;
        tminNode2 = (TMin)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);
        ppdiflistNode4 = (PPDifList)nodeArrayList3.get(0);

        ppdiflistNode1 = new ADifListPDifList(tminNode2, ppvalueNode3, ppdiflistNode4);
        }
	nodeList.add(ppdiflistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AMultValPMultList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPMultList ppmultlistNode1;
        {
            // Block
        TMult tmultNode2;
        PPValue ppvalueNode3;
        tmultNode2 = (TMult)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);

        ppmultlistNode1 = new AMultValPMultList(tmultNode2, ppvalueNode3);
        }
	nodeList.add(ppmultlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AMultListPMultList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPMultList ppmultlistNode1;
        {
            // Block
        TMult tmultNode2;
        PPValue ppvalueNode3;
        PPMultList ppmultlistNode4;
        tmultNode2 = (TMult)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);
        ppmultlistNode4 = (PPMultList)nodeArrayList3.get(0);

        ppmultlistNode1 = new AMultListPMultList(tmultNode2, ppvalueNode3, ppmultlistNode4);
        }
	nodeList.add(ppmultlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce APModv */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPModv ppmodvNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ppmodvNode1 = new APModv(tintegerNode2);
        }
	nodeList.add(ppmodvNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce APRound */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPRound pproundNode1;
        {
            // Block
        TRound troundNode2;
        PPValue ppvalueNode3;
        troundNode2 = (TRound)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);

        pproundNode1 = new APRound(troundNode2, ppvalueNode3);
        }
	nodeList.add(pproundNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce APSqrt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPSqrt ppsqrtNode1;
        {
            // Block
        TSqrt tsqrtNode2;
        PPValue ppvalueNode3;
        tsqrtNode2 = (TSqrt)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);

        ppsqrtNode1 = new APSqrt(tsqrtNode2, ppvalueNode3);
        }
	nodeList.add(ppsqrtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce APPower */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPPower pppowerNode1;
        {
            // Block
        TPower tpowerNode2;
        tpowerNode2 = (TPower)nodeArrayList1.get(0);

        pppowerNode1 = new APPower(tpowerNode2);
        }
	nodeList.add(pppowerNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce APExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPExp ppexpNode1;
        {
            // Block
        TExp texpNode2;
        PPValue ppvalueNode3;
        texpNode2 = (TExp)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);

        ppexpNode1 = new APExp(texpNode2, ppvalueNode3);
        }
	nodeList.add(ppexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ASetheadingPSetheading */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPSetheading ppsetheadingNode1;
        {
            // Block
        TSetheading tsetheadingNode2;
        tsetheadingNode2 = (TSetheading)nodeArrayList1.get(0);

        ppsetheadingNode1 = new ASetheadingPSetheading(tsetheadingNode2);
        }
	nodeList.add(ppsetheadingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ASethPSetheading */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPSetheading ppsetheadingNode1;
        {
            // Block
        TSeth tsethNode2;
        PPValue ppvalueNode3;
        tsethNode2 = (TSeth)nodeArrayList1.get(0);
        ppvalueNode3 = (PPValue)nodeArrayList2.get(0);

        ppsetheadingNode1 = new ASethPSetheading(tsethNode2, ppvalueNode3);
        }
	nodeList.add(ppsetheadingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce APHome */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPHome pphomeNode1;
        {
            // Block
        THome thomeNode2;
        thomeNode2 = (THome)nodeArrayList1.get(0);

        pphomeNode1 = new APHome(thomeNode2);
        }
	nodeList.add(pphomeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce APArc */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPArc pparcNode1;
        {
            // Block
        TArc tarcNode2;
        TInteger tintegerNode3;
        PPValue ppvalueNode4;
        tarcNode2 = (TArc)nodeArrayList1.get(0);
        tintegerNode3 = (TInteger)nodeArrayList2.get(0);
        ppvalueNode4 = (PPValue)nodeArrayList3.get(0);

        pparcNode1 = new APArc(tarcNode2, tintegerNode3, ppvalueNode4);
        }
	nodeList.add(pparcNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AClearscreenPClearscreen */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPClearscreen ppclearscreenNode1;
        {
            // Block
        TClearscreen tclearscreenNode2;
        tclearscreenNode2 = (TClearscreen)nodeArrayList1.get(0);

        ppclearscreenNode1 = new AClearscreenPClearscreen(tclearscreenNode2);
        }
	nodeList.add(ppclearscreenNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ACsPClearscreen */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPClearscreen ppclearscreenNode1;
        {
            // Block
        TCs tcsNode2;
        PPHome pphomeNode3;
        tcsNode2 = (TCs)nodeArrayList1.get(0);
        pphomeNode3 = (PPHome)nodeArrayList2.get(0);

        ppclearscreenNode1 = new ACsPClearscreen(tcsNode2, pphomeNode3);
        }
	nodeList.add(ppclearscreenNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce APendownPPendown */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPPendown pppendownNode1;
        {
            // Block
        TPendown tpendownNode2;
        tpendownNode2 = (TPendown)nodeArrayList1.get(0);

        pppendownNode1 = new APendownPPendown(tpendownNode2);
        }
	nodeList.add(pppendownNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce APdPPendown */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPPendown pppendownNode1;
        {
            // Block
        TPd tpdNode2;
        tpdNode2 = (TPd)nodeArrayList1.get(0);

        pppendownNode1 = new APdPPendown(tpdNode2);
        }
	nodeList.add(pppendownNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce APenupPPenup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPPenup pppenupNode1;
        {
            // Block
        TPenup tpenupNode2;
        tpenupNode2 = (TPenup)nodeArrayList1.get(0);

        pppenupNode1 = new APenupPPenup(tpenupNode2);
        }
	nodeList.add(pppenupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce APuPPenup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPPenup pppenupNode1;
        {
            // Block
        TPu tpuNode2;
        tpuNode2 = (TPu)nodeArrayList1.get(0);

        pppenupNode1 = new APuPPenup(tpuNode2);
        }
	nodeList.add(pppenupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ASetpencolorPSetpencolor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPSetpencolor ppsetpencolorNode1;
        {
            // Block
        TSetpencolor tsetpencolorNode2;
        tsetpencolorNode2 = (TSetpencolor)nodeArrayList1.get(0);

        ppsetpencolorNode1 = new ASetpencolorPSetpencolor(tsetpencolorNode2);
        }
	nodeList.add(ppsetpencolorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce ASetpcPSetpencolor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPSetpencolor ppsetpencolorNode1;
        {
            // Block
        TSetpc tsetpcNode2;
        TNumber1 tnumber1Node3;
        tsetpcNode2 = (TSetpc)nodeArrayList1.get(0);
        tnumber1Node3 = (TNumber1)nodeArrayList2.get(0);

        ppsetpencolorNode1 = new ASetpcPSetpencolor(tsetpcNode2, tnumber1Node3);
        }
	nodeList.add(ppsetpencolorNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {67, SHIFT, 3}, },
			{{-1, ERROR, 2}, {72, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {67, SHIFT, 4}, },
			{{-1, REDUCE, 22}, {67, SHIFT, 4}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 21}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 5}, {4, 6}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'WORD'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: identifier, EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 1, 3, 2, 2, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
