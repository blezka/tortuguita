/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp.logo.analysis;

import java.util.*;
import comp.logo.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPWord().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPWord(APWord node)
    {
        defaultIn(node);
    }

    public void outAPWord(APWord node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPWord(APWord node)
    {
        inAPWord(node);
        if(node.getWord() != null)
        {
            node.getWord().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPIdentList() != null)
        {
            node.getPIdentList().apply(this);
        }
        outAPWord(node);
    }

    public void inAPList(APList node)
    {
        defaultIn(node);
    }

    public void outAPList(APList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPList(APList node)
    {
        inAPList(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPIdentList() != null)
        {
            node.getPIdentList().apply(this);
        }
        outAPList(node);
    }

    public void inAPFirst(APFirst node)
    {
        defaultIn(node);
    }

    public void outAPFirst(APFirst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPFirst(APFirst node)
    {
        inAPFirst(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getPThing() != null)
        {
            node.getPThing().apply(this);
        }
        outAPFirst(node);
    }

    public void inAButfirstPButfirst(AButfirstPButfirst node)
    {
        defaultIn(node);
    }

    public void outAButfirstPButfirst(AButfirstPButfirst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAButfirstPButfirst(AButfirstPButfirst node)
    {
        inAButfirstPButfirst(node);
        if(node.getButfirst() != null)
        {
            node.getButfirst().apply(this);
        }
        if(node.getPThing() != null)
        {
            node.getPThing().apply(this);
        }
        outAButfirstPButfirst(node);
    }

    public void inABfPButfirst(ABfPButfirst node)
    {
        defaultIn(node);
    }

    public void outABfPButfirst(ABfPButfirst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABfPButfirst(ABfPButfirst node)
    {
        inABfPButfirst(node);
        if(node.getBf() != null)
        {
            node.getBf().apply(this);
        }
        if(node.getPThing() != null)
        {
            node.getPThing().apply(this);
        }
        outABfPButfirst(node);
    }

    public void inAPLast(APLast node)
    {
        defaultIn(node);
    }

    public void outAPLast(APLast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPLast(APLast node)
    {
        inAPLast(node);
        if(node.getLast() != null)
        {
            node.getLast().apply(this);
        }
        if(node.getPThing() != null)
        {
            node.getPThing().apply(this);
        }
        outAPLast(node);
    }

    public void inAPSetitem(APSetitem node)
    {
        defaultIn(node);
    }

    public void outAPSetitem(APSetitem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSetitem(APSetitem node)
    {
        inAPSetitem(node);
        if(node.getSetitem() != null)
        {
            node.getSetitem().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getPList() != null)
        {
            node.getPList().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPSetitem(node);
    }

    public void inAPPush(APPush node)
    {
        defaultIn(node);
    }

    public void outAPPush(APPush node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPPush(APPush node)
    {
        inAPPush(node);
        if(node.getPush() != null)
        {
            node.getPush().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPThing() != null)
        {
            node.getPThing().apply(this);
        }
        outAPPush(node);
    }

    public void inAPPop(APPop node)
    {
        defaultIn(node);
    }

    public void outAPPop(APPop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPPop(APPop node)
    {
        inAPPop(node);
        if(node.getPop() != null)
        {
            node.getPop().apply(this);
        }
        if(node.getPList() != null)
        {
            node.getPList().apply(this);
        }
        outAPPop(node);
    }

    public void inAPrintPPrint(APrintPPrint node)
    {
        defaultIn(node);
    }

    public void outAPrintPPrint(APrintPPrint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintPPrint(APrintPPrint node)
    {
        inAPrintPPrint(node);
        outAPrintPPrint(node);
    }

    public void inAPrPPrint(APrPPrint node)
    {
        defaultIn(node);
    }

    public void outAPrPPrint(APrPPrint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrPPrint(APrPPrint node)
    {
        inAPrPPrint(node);
        if(node.getPThingList() != null)
        {
            node.getPThingList().apply(this);
        }
        outAPrPPrint(node);
    }

    public void inASumPSum(ASumPSum node)
    {
        defaultIn(node);
    }

    public void outASumPSum(ASumPSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASumPSum(ASumPSum node)
    {
        inASumPSum(node);
        if(node.getSum() != null)
        {
            node.getSum().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPValueList() != null)
        {
            node.getPValueList().apply(this);
        }
        outASumPSum(node);
    }

    public void inAPlusPSum(APlusPSum node)
    {
        defaultIn(node);
    }

    public void outAPlusPSum(APlusPSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusPSum(APlusPSum node)
    {
        inAPlusPSum(node);
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPSumList() != null)
        {
            node.getPSumList().apply(this);
        }
        outAPlusPSum(node);
    }

    public void inADifPDifference(ADifPDifference node)
    {
        defaultIn(node);
    }

    public void outADifPDifference(ADifPDifference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifPDifference(ADifPDifference node)
    {
        inADifPDifference(node);
        if(node.getDifference() != null)
        {
            node.getDifference().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPValueList() != null)
        {
            node.getPValueList().apply(this);
        }
        outADifPDifference(node);
    }

    public void inAMinPDifference(AMinPDifference node)
    {
        defaultIn(node);
    }

    public void outAMinPDifference(AMinPDifference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinPDifference(AMinPDifference node)
    {
        inAMinPDifference(node);
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPDifList() != null)
        {
            node.getPDifList().apply(this);
        }
        outAMinPDifference(node);
    }

    public void inAMinusPMinus(AMinusPMinus node)
    {
        defaultIn(node);
    }

    public void outAMinusPMinus(AMinusPMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusPMinus(AMinusPMinus node)
    {
        inAMinusPMinus(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAMinusPMinus(node);
    }

    public void inAMinPMinus(AMinPMinus node)
    {
        defaultIn(node);
    }

    public void outAMinPMinus(AMinPMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinPMinus(AMinPMinus node)
    {
        inAMinPMinus(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAMinPMinus(node);
    }

    public void inAProdPProduct(AProdPProduct node)
    {
        defaultIn(node);
    }

    public void outAProdPProduct(AProdPProduct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdPProduct(AProdPProduct node)
    {
        inAProdPProduct(node);
        if(node.getProduct() != null)
        {
            node.getProduct().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPValueList() != null)
        {
            node.getPValueList().apply(this);
        }
        outAProdPProduct(node);
    }

    public void inAMultPProduct(AMultPProduct node)
    {
        defaultIn(node);
    }

    public void outAMultPProduct(AMultPProduct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultPProduct(AMultPProduct node)
    {
        inAMultPProduct(node);
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPMultList() != null)
        {
            node.getPMultList().apply(this);
        }
        outAMultPProduct(node);
    }

    public void inAPModulo(APModulo node)
    {
        defaultIn(node);
    }

    public void outAPModulo(APModulo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPModulo(APModulo node)
    {
        inAPModulo(node);
        if(node.getModulo() != null)
        {
            node.getModulo().apply(this);
        }
        if(node.getPModv() != null)
        {
            node.getPModv().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAPModulo(node);
    }

    public void inAPInt(APInt node)
    {
        defaultIn(node);
    }

    public void outAPInt(APInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPInt(APInt node)
    {
        inAPInt(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPInt(node);
    }

    public void inAIdentListPIdentList(AIdentListPIdentList node)
    {
        defaultIn(node);
    }

    public void outAIdentListPIdentList(AIdentListPIdentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentListPIdentList(AIdentListPIdentList node)
    {
        inAIdentListPIdentList(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPIdentList() != null)
        {
            node.getPIdentList().apply(this);
        }
        outAIdentListPIdentList(node);
    }

    public void inAIdentPIdentList(AIdentPIdentList node)
    {
        defaultIn(node);
    }

    public void outAIdentPIdentList(AIdentPIdentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentPIdentList(AIdentPIdentList node)
    {
        inAIdentPIdentList(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentPIdentList(node);
    }

    public void inAWordPThing(AWordPThing node)
    {
        defaultIn(node);
    }

    public void outAWordPThing(AWordPThing node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWordPThing(AWordPThing node)
    {
        inAWordPThing(node);
        if(node.getPWord() != null)
        {
            node.getPWord().apply(this);
        }
        outAWordPThing(node);
    }

    public void inAListPThing(AListPThing node)
    {
        defaultIn(node);
    }

    public void outAListPThing(AListPThing node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListPThing(AListPThing node)
    {
        inAListPThing(node);
        if(node.getPList() != null)
        {
            node.getPList().apply(this);
        }
        outAListPThing(node);
    }

    public void inAThingPThingList(AThingPThingList node)
    {
        defaultIn(node);
    }

    public void outAThingPThingList(AThingPThingList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThingPThingList(AThingPThingList node)
    {
        inAThingPThingList(node);
        if(node.getPThing() != null)
        {
            node.getPThing().apply(this);
        }
        outAThingPThingList(node);
    }

    public void inALstPThingList(ALstPThingList node)
    {
        defaultIn(node);
    }

    public void outALstPThingList(ALstPThingList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALstPThingList(ALstPThingList node)
    {
        inALstPThingList(node);
        if(node.getPThingList() != null)
        {
            node.getPThingList().apply(this);
        }
        outALstPThingList(node);
    }

    public void inAIntPValue(AIntPValue node)
    {
        defaultIn(node);
    }

    public void outAIntPValue(AIntPValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntPValue(AIntPValue node)
    {
        inAIntPValue(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntPValue(node);
    }

    public void inADobPValue(ADobPValue node)
    {
        defaultIn(node);
    }

    public void outADobPValue(ADobPValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADobPValue(ADobPValue node)
    {
        inADobPValue(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outADobPValue(node);
    }

    public void inAValueListPValueList(AValueListPValueList node)
    {
        defaultIn(node);
    }

    public void outAValueListPValueList(AValueListPValueList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueListPValueList(AValueListPValueList node)
    {
        inAValueListPValueList(node);
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPValueList() != null)
        {
            node.getPValueList().apply(this);
        }
        outAValueListPValueList(node);
    }

    public void inAValuePValueList(AValuePValueList node)
    {
        defaultIn(node);
    }

    public void outAValuePValueList(AValuePValueList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValuePValueList(AValuePValueList node)
    {
        inAValuePValueList(node);
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAValuePValueList(node);
    }

    public void inASumValPSumList(ASumValPSumList node)
    {
        defaultIn(node);
    }

    public void outASumValPSumList(ASumValPSumList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASumValPSumList(ASumValPSumList node)
    {
        inASumValPSumList(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outASumValPSumList(node);
    }

    public void inASumListPSumList(ASumListPSumList node)
    {
        defaultIn(node);
    }

    public void outASumListPSumList(ASumListPSumList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASumListPSumList(ASumListPSumList node)
    {
        inASumListPSumList(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPSumList() != null)
        {
            node.getPSumList().apply(this);
        }
        outASumListPSumList(node);
    }

    public void inADifValPDifList(ADifValPDifList node)
    {
        defaultIn(node);
    }

    public void outADifValPDifList(ADifValPDifList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifValPDifList(ADifValPDifList node)
    {
        inADifValPDifList(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outADifValPDifList(node);
    }

    public void inADifListPDifList(ADifListPDifList node)
    {
        defaultIn(node);
    }

    public void outADifListPDifList(ADifListPDifList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifListPDifList(ADifListPDifList node)
    {
        inADifListPDifList(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPDifList() != null)
        {
            node.getPDifList().apply(this);
        }
        outADifListPDifList(node);
    }

    public void inAMultValPMultList(AMultValPMultList node)
    {
        defaultIn(node);
    }

    public void outAMultValPMultList(AMultValPMultList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultValPMultList(AMultValPMultList node)
    {
        inAMultValPMultList(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAMultValPMultList(node);
    }

    public void inAMultListPMultList(AMultListPMultList node)
    {
        defaultIn(node);
    }

    public void outAMultListPMultList(AMultListPMultList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultListPMultList(AMultListPMultList node)
    {
        inAMultListPMultList(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        if(node.getPMultList() != null)
        {
            node.getPMultList().apply(this);
        }
        outAMultListPMultList(node);
    }

    public void inAPModv(APModv node)
    {
        defaultIn(node);
    }

    public void outAPModv(APModv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPModv(APModv node)
    {
        inAPModv(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAPModv(node);
    }

    public void inAPRound(APRound node)
    {
        defaultIn(node);
    }

    public void outAPRound(APRound node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPRound(APRound node)
    {
        inAPRound(node);
        if(node.getRound() != null)
        {
            node.getRound().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPRound(node);
    }

    public void inAPSqrt(APSqrt node)
    {
        defaultIn(node);
    }

    public void outAPSqrt(APSqrt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSqrt(APSqrt node)
    {
        inAPSqrt(node);
        if(node.getSqrt() != null)
        {
            node.getSqrt().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPSqrt(node);
    }

    public void inAPPower(APPower node)
    {
        defaultIn(node);
    }

    public void outAPPower(APPower node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPPower(APPower node)
    {
        inAPPower(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAPPower(node);
    }

    public void inAPExp(APExp node)
    {
        defaultIn(node);
    }

    public void outAPExp(APExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPExp(APExp node)
    {
        inAPExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPExp(node);
    }

    public void inASetheadingPSetheading(ASetheadingPSetheading node)
    {
        defaultIn(node);
    }

    public void outASetheadingPSetheading(ASetheadingPSetheading node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetheadingPSetheading(ASetheadingPSetheading node)
    {
        inASetheadingPSetheading(node);
        if(node.getSetheading() != null)
        {
            node.getSetheading().apply(this);
        }
        outASetheadingPSetheading(node);
    }

    public void inASethPSetheading(ASethPSetheading node)
    {
        defaultIn(node);
    }

    public void outASethPSetheading(ASethPSetheading node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASethPSetheading(ASethPSetheading node)
    {
        inASethPSetheading(node);
        if(node.getSeth() != null)
        {
            node.getSeth().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outASethPSetheading(node);
    }

    public void inAPHome(APHome node)
    {
        defaultIn(node);
    }

    public void outAPHome(APHome node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPHome(APHome node)
    {
        inAPHome(node);
        if(node.getHome() != null)
        {
            node.getHome().apply(this);
        }
        outAPHome(node);
    }

    public void inAPArc(APArc node)
    {
        defaultIn(node);
    }

    public void outAPArc(APArc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPArc(APArc node)
    {
        inAPArc(node);
        if(node.getArc() != null)
        {
            node.getArc().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getPValue() != null)
        {
            node.getPValue().apply(this);
        }
        outAPArc(node);
    }

    public void inAClearscreenPClearscreen(AClearscreenPClearscreen node)
    {
        defaultIn(node);
    }

    public void outAClearscreenPClearscreen(AClearscreenPClearscreen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClearscreenPClearscreen(AClearscreenPClearscreen node)
    {
        inAClearscreenPClearscreen(node);
        if(node.getClearscreen() != null)
        {
            node.getClearscreen().apply(this);
        }
        outAClearscreenPClearscreen(node);
    }

    public void inACsPClearscreen(ACsPClearscreen node)
    {
        defaultIn(node);
    }

    public void outACsPClearscreen(ACsPClearscreen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsPClearscreen(ACsPClearscreen node)
    {
        inACsPClearscreen(node);
        if(node.getCs() != null)
        {
            node.getCs().apply(this);
        }
        if(node.getPHome() != null)
        {
            node.getPHome().apply(this);
        }
        outACsPClearscreen(node);
    }

    public void inAPendownPPendown(APendownPPendown node)
    {
        defaultIn(node);
    }

    public void outAPendownPPendown(APendownPPendown node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPendownPPendown(APendownPPendown node)
    {
        inAPendownPPendown(node);
        if(node.getPendown() != null)
        {
            node.getPendown().apply(this);
        }
        outAPendownPPendown(node);
    }

    public void inAPdPPendown(APdPPendown node)
    {
        defaultIn(node);
    }

    public void outAPdPPendown(APdPPendown node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPdPPendown(APdPPendown node)
    {
        inAPdPPendown(node);
        if(node.getPd() != null)
        {
            node.getPd().apply(this);
        }
        outAPdPPendown(node);
    }

    public void inAPenupPPenup(APenupPPenup node)
    {
        defaultIn(node);
    }

    public void outAPenupPPenup(APenupPPenup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPenupPPenup(APenupPPenup node)
    {
        inAPenupPPenup(node);
        if(node.getPenup() != null)
        {
            node.getPenup().apply(this);
        }
        outAPenupPPenup(node);
    }

    public void inAPuPPenup(APuPPenup node)
    {
        defaultIn(node);
    }

    public void outAPuPPenup(APuPPenup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPuPPenup(APuPPenup node)
    {
        inAPuPPenup(node);
        if(node.getPu() != null)
        {
            node.getPu().apply(this);
        }
        outAPuPPenup(node);
    }

    public void inASetpencolorPSetpencolor(ASetpencolorPSetpencolor node)
    {
        defaultIn(node);
    }

    public void outASetpencolorPSetpencolor(ASetpencolorPSetpencolor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetpencolorPSetpencolor(ASetpencolorPSetpencolor node)
    {
        inASetpencolorPSetpencolor(node);
        if(node.getSetpencolor() != null)
        {
            node.getSetpencolor().apply(this);
        }
        outASetpencolorPSetpencolor(node);
    }

    public void inASetpcPSetpencolor(ASetpcPSetpencolor node)
    {
        defaultIn(node);
    }

    public void outASetpcPSetpencolor(ASetpcPSetpencolor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetpcPSetpencolor(ASetpcPSetpencolor node)
    {
        inASetpcPSetpencolor(node);
        if(node.getSetpc() != null)
        {
            node.getSetpc().apply(this);
        }
        if(node.getNumber1() != null)
        {
            node.getNumber1().apply(this);
        }
        outASetpcPSetpencolor(node);
    }
}
